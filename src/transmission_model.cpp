// Generated by dust2 (version 0.3.16) - do not edit

// Generated by odin2 (version 0.3.19) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(transmission_model)]]
// [[dust2::time_type(discrete)]]
// [[dust2::parameter(n_age, type = "int", rank = 0, required = FALSE, constant = TRUE)]]
// [[dust2::parameter(n_vacc, type = "int", rank = 0, required = FALSE, constant = TRUE)]]
// [[dust2::parameter(n_risk, type = "int", rank = 0, required = FALSE, constant = TRUE)]]
// [[dust2::parameter(S0, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(I0, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Rpop0, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(incubation_rate, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(recovery_rate, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(cfr_normal, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(natural_immunity_waning, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(prop_severe, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(severe_recovery_rate, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(cfr_severe, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(prop_complications, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(tt_R0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_R0_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(contact_matrix, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(seeded, type = "real_type", rank = 4, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(tt_seeded, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_seeded_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(crude_death, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_death_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(tt_death_changes, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(simp_birth_death, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
// [[dust2::parameter(crude_birth, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_birth_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(tt_birth_changes, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(repro_low, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(repro_high, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age_maternal_protection_ends, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(protection_weight_vacc, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(protection_weight_rec, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(aging_rate, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(tt_vaccination_coverage, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_vacc_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(vaccination_coverage, type = "real_type", rank = 4, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age_vaccination_beta_modifier, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(no_migration_changes, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(tt_migration, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(migration_in_number, type = "real_type", rank = 4, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(migration_distribution_values, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(repro_weight, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(short_term_waning, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(long_term_waning, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
class transmission_model {
public:
  transmission_model() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 13> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<3> S_available;
      dust2::array::dimensions<3> E_available;
      dust2::array::dimensions<3> I_available;
      dust2::array::dimensions<3> R_available;
      dust2::array::dimensions<3> Rc_available;
      dust2::array::dimensions<3> Is_available;
      dust2::array::dimensions<3> new_case;
      dust2::array::dimensions<3> migration_occuring_S;
      dust2::array::dimensions<3> migration_occuring_E;
      dust2::array::dimensions<3> migration_occuring_I;
      dust2::array::dimensions<3> migration_occuring_R;
      dust2::array::dimensions<3> migration_occuring_Is;
      dust2::array::dimensions<3> migration_occuring_Rc;
      dust2::array::dimensions<3> inf_weighted;
      dust2::array::dimensions<1> infectious_source;
      dust2::array::dimensions<2> lambda_contact;
      dust2::array::dimensions<1> lambda_raw;
      dust2::array::dimensions<4> ngm_unfolded;
      dust2::array::dimensions<1> ngm;
      dust2::array::dimensions<1> Reff_age;
      dust2::array::dimensions<3> seeded_actual;
      dust2::array::dimensions<1> Npop_age;
      dust2::array::dimensions<1> repro_weight;
      dust2::array::dimensions<3> S;
      dust2::array::dimensions<3> E;
      dust2::array::dimensions<3> I;
      dust2::array::dimensions<3> R;
      dust2::array::dimensions<3> Is;
      dust2::array::dimensions<3> Rc;
      dust2::array::dimensions<3> S0;
      dust2::array::dimensions<3> I0;
      dust2::array::dimensions<3> Rpop0;
      dust2::array::dimensions<1> prop_complications;
      dust2::array::dimensions<3> beta_updated;
      dust2::array::dimensions<3> age_vaccination_beta_modifier;
      dust2::array::dimensions<3> prop_severe;
      dust2::array::dimensions<1> cfr_normal;
      dust2::array::dimensions<1> cfr_severe;
      dust2::array::dimensions<3> beta;
      dust2::array::dimensions<3> infectious_period;
      dust2::array::dimensions<3> lambda;
      dust2::array::dimensions<1> tt_R0;
      dust2::array::dimensions<1> R0;
      dust2::array::dimensions<2> contact_matrix;
      dust2::array::dimensions<3> lambda_S;
      dust2::array::dimensions<3> waning_R;
      dust2::array::dimensions<3> waning_Rc;
      dust2::array::dimensions<3> incubated;
      dust2::array::dimensions<1> tt_seeded;
      dust2::array::dimensions<4> seeded;
      dust2::array::dimensions<3> t_seeded;
      dust2::array::dimensions<3> into_I;
      dust2::array::dimensions<3> into_Is;
      dust2::array::dimensions<3> recovered_I_to_R;
      dust2::array::dimensions<3> recovered_from_Is;
      dust2::array::dimensions<3> recovered_Is_to_R;
      dust2::array::dimensions<3> recovered_Is_to_Rc;
      dust2::array::dimensions<1> aging_rate;
      dust2::array::dimensions<3> aging_into_S;
      dust2::array::dimensions<3> aging_out_of_S;
      dust2::array::dimensions<3> aging_into_E;
      dust2::array::dimensions<3> aging_out_of_E;
      dust2::array::dimensions<3> aging_into_I;
      dust2::array::dimensions<3> aging_out_of_I;
      dust2::array::dimensions<3> aging_into_R;
      dust2::array::dimensions<3> aging_out_of_R;
      dust2::array::dimensions<3> aging_into_Is;
      dust2::array::dimensions<3> aging_out_of_Is;
      dust2::array::dimensions<3> aging_into_Rc;
      dust2::array::dimensions<3> aging_out_of_Rc;
      dust2::array::dimensions<2> Npop_age_risk;
      dust2::array::dimensions<1> prop_maternal_vaccinated;
      dust2::array::dimensions<1> prop_maternal_natural;
      dust2::array::dimensions<1> vaccinated_mums;
      dust2::array::dimensions<1> antibody_mums;
      dust2::array::dimensions<1> tt_vaccination_coverage;
      dust2::array::dimensions<4> vaccination_coverage;
      dust2::array::dimensions<3> vaccination_prop;
      dust2::array::dimensions<3> waning_from_S_short;
      dust2::array::dimensions<3> waning_to_S_long;
      dust2::array::dimensions<3> waning_from_S_long;
      dust2::array::dimensions<3> waning_to_S_unvaccinated;
      dust2::array::dimensions<3> waning_from_E_short;
      dust2::array::dimensions<3> waning_to_E_long;
      dust2::array::dimensions<3> waning_from_E_long;
      dust2::array::dimensions<3> waning_to_E_unvaccinated;
      dust2::array::dimensions<3> waning_from_I_short;
      dust2::array::dimensions<3> waning_to_I_long;
      dust2::array::dimensions<3> waning_from_I_long;
      dust2::array::dimensions<3> waning_to_I_unvaccinated;
      dust2::array::dimensions<3> waning_from_R_short;
      dust2::array::dimensions<3> waning_to_R_long;
      dust2::array::dimensions<3> waning_from_R_long;
      dust2::array::dimensions<3> waning_to_R_unvaccinated;
      dust2::array::dimensions<3> waning_from_Is_short;
      dust2::array::dimensions<3> waning_to_Is_long;
      dust2::array::dimensions<3> waning_from_Is_long;
      dust2::array::dimensions<3> waning_to_Is_unvaccinated;
      dust2::array::dimensions<3> waning_from_Rc_short;
      dust2::array::dimensions<3> waning_to_Rc_long;
      dust2::array::dimensions<3> waning_from_Rc_long;
      dust2::array::dimensions<3> waning_to_Rc_unvaccinated;
      dust2::array::dimensions<1> short_term_waning;
      dust2::array::dimensions<1> long_term_waning;
      dust2::array::dimensions<3> vaccinating_into_S;
      dust2::array::dimensions<3> vaccinating_out_of_S;
      dust2::array::dimensions<3> vaccinating_into_E;
      dust2::array::dimensions<3> vaccinating_out_of_E;
      dust2::array::dimensions<3> vaccinating_into_I;
      dust2::array::dimensions<3> vaccinating_out_of_I;
      dust2::array::dimensions<3> vaccinating_into_R;
      dust2::array::dimensions<3> vaccinating_out_of_R;
      dust2::array::dimensions<3> vaccinating_into_Is;
      dust2::array::dimensions<3> vaccinating_out_of_Is;
      dust2::array::dimensions<3> vaccinating_into_Rc;
      dust2::array::dimensions<3> vaccinating_out_of_Rc;
      dust2::array::dimensions<1> Births;
      dust2::array::dimensions<1> reproductive_population;
      dust2::array::dimensions<1> birth_rate;
      dust2::array::dimensions<1> tt_birth_changes;
      dust2::array::dimensions<1> tt_death_changes;
      dust2::array::dimensions<2> background_death;
      dust2::array::dimensions<2> Npop_background_death;
      dust2::array::dimensions<2> crude_birth;
      dust2::array::dimensions<3> crude_death;
      dust2::array::dimensions<1> birth_int;
      dust2::array::dimensions<2> death_int;
      dust2::array::dimensions<3> S_death;
      dust2::array::dimensions<3> E_death;
      dust2::array::dimensions<3> I_death;
      dust2::array::dimensions<3> R_death;
      dust2::array::dimensions<3> Is_death;
      dust2::array::dimensions<3> Rc_death;
      dust2::array::dimensions<1> tt_migration;
      dust2::array::dimensions<1> migration_distribution;
      dust2::array::dimensions<4> migration_in_number;
      dust2::array::dimensions<2> migration_distribution_values;
      dust2::array::dimensions<3> migration;
      dust2::array::dimensions<3> migration_adjusted;
      dust2::array::dimensions<3> migration_S;
      dust2::array::dimensions<3> migration_E;
      dust2::array::dimensions<3> migration_I;
      dust2::array::dimensions<3> migration_R;
      dust2::array::dimensions<3> migration_Is;
      dust2::array::dimensions<3> migration_Rc;
      dust2::array::dimensions<3> S_after_aging;
      dust2::array::dimensions<3> E_after_aging;
      dust2::array::dimensions<3> I_after_aging;
      dust2::array::dimensions<3> R_after_aging;
      dust2::array::dimensions<3> Is_after_aging;
      dust2::array::dimensions<3> Rc_after_aging;
      dust2::array::dimensions<3> S_after_vaccination;
      dust2::array::dimensions<3> E_after_vaccination;
      dust2::array::dimensions<3> I_after_vaccination;
      dust2::array::dimensions<3> R_after_vaccination;
      dust2::array::dimensions<3> Is_after_vaccination;
      dust2::array::dimensions<3> Rc_after_vaccination;
      dust2::array::dimensions<3> S_after_waning;
      dust2::array::dimensions<3> E_after_waning;
      dust2::array::dimensions<3> I_after_waning;
      dust2::array::dimensions<3> R_after_waning;
      dust2::array::dimensions<3> Is_after_waning;
      dust2::array::dimensions<3> Rc_after_waning;
    } dim;
    int n_age;
    int n_vacc;
    int n_risk;
    real_type incubation_rate;
    real_type recovery_rate;
    real_type natural_immunity_waning;
    real_type severe_recovery_rate;
    int no_R0_changes;
    int no_seeded_changes;
    int no_death_changes;
    real_type simp_birth_death;
    int no_birth_changes;
    real_type repro_low;
    real_type repro_high;
    real_type age_maternal_protection_ends;
    real_type protection_weight_vacc;
    real_type protection_weight_rec;
    int no_vacc_changes;
    int no_migration_changes;
    std::vector<real_type> S0;
    std::vector<real_type> I0;
    std::vector<real_type> Rpop0;
    std::vector<real_type> cfr_normal;
    std::vector<real_type> prop_severe;
    std::vector<real_type> cfr_severe;
    std::vector<real_type> prop_complications;
    std::vector<real_type> R0;
    std::vector<real_type> tt_R0;
    std::vector<real_type> contact_matrix;
    std::vector<real_type> seeded;
    std::vector<real_type> tt_seeded;
    std::vector<real_type> crude_death;
    std::vector<real_type> tt_death_changes;
    std::vector<real_type> crude_birth;
    std::vector<real_type> tt_birth_changes;
    std::vector<real_type> aging_rate;
    std::vector<real_type> tt_vaccination_coverage;
    std::vector<real_type> vaccination_coverage;
    std::vector<real_type> age_vaccination_beta_modifier;
    std::vector<real_type> tt_migration;
    std::vector<real_type> migration_in_number;
    std::vector<real_type> migration_distribution_values;
    std::vector<real_type> repro_weight;
    std::vector<real_type> short_term_waning;
    std::vector<real_type> long_term_waning;
    dust2::interpolate::InterpolateConstantArray<real_type, 3> interpolate_migration;
    dust2::interpolate::InterpolateConstantArray<real_type, 1> interpolate_migration_distribution;
    dust2::interpolate::InterpolateConstant<real_type> interpolate_t_R0;
    dust2::interpolate::InterpolateConstantArray<real_type, 3> interpolate_t_seeded;
    dust2::interpolate::InterpolateConstantArray<real_type, 2> interpolate_death_int;
    dust2::interpolate::InterpolateConstantArray<real_type, 1> interpolate_birth_int;
    dust2::interpolate::InterpolateConstantArray<real_type, 3> interpolate_vaccination_prop;
  };
  struct internal_state {
    std::vector<real_type> Npop_age_risk;
    std::vector<real_type> vaccinated_mums;
    std::vector<real_type> antibody_mums;
    std::vector<real_type> aging_out_of_S;
    std::vector<real_type> aging_into_E;
    std::vector<real_type> aging_out_of_E;
    std::vector<real_type> aging_into_I;
    std::vector<real_type> aging_out_of_I;
    std::vector<real_type> aging_into_R;
    std::vector<real_type> aging_out_of_R;
    std::vector<real_type> aging_into_Is;
    std::vector<real_type> aging_out_of_Is;
    std::vector<real_type> aging_into_Rc;
    std::vector<real_type> aging_out_of_Rc;
    std::vector<real_type> reproductive_population;
    std::vector<real_type> E_after_aging;
    std::vector<real_type> I_after_aging;
    std::vector<real_type> R_after_aging;
    std::vector<real_type> Is_after_aging;
    std::vector<real_type> Rc_after_aging;
    std::vector<real_type> prop_maternal_vaccinated;
    std::vector<real_type> prop_maternal_natural;
    std::vector<real_type> migration;
    std::vector<real_type> migration_distribution;
    std::vector<real_type> t_seeded;
    std::vector<real_type> death_int;
    std::vector<real_type> birth_int;
    std::vector<real_type> vaccination_prop;
    std::vector<real_type> waning_R;
    std::vector<real_type> waning_Rc;
    std::vector<real_type> vaccinating_out_of_E;
    std::vector<real_type> vaccinating_out_of_I;
    std::vector<real_type> vaccinating_out_of_R;
    std::vector<real_type> vaccinating_out_of_Is;
    std::vector<real_type> vaccinating_out_of_Rc;
    std::vector<real_type> seeded_actual;
    std::vector<real_type> background_death;
    std::vector<real_type> vaccinating_into_E;
    std::vector<real_type> vaccinating_into_I;
    std::vector<real_type> vaccinating_into_R;
    std::vector<real_type> vaccinating_into_Is;
    std::vector<real_type> vaccinating_into_Rc;
    std::vector<real_type> migration_adjusted;
    std::vector<real_type> infectious_period;
    std::vector<real_type> Npop_background_death;
    std::vector<real_type> E_after_vaccination;
    std::vector<real_type> I_after_vaccination;
    std::vector<real_type> R_after_vaccination;
    std::vector<real_type> Is_after_vaccination;
    std::vector<real_type> Rc_after_vaccination;
    std::vector<real_type> migration_occuring_S;
    std::vector<real_type> migration_occuring_E;
    std::vector<real_type> migration_occuring_I;
    std::vector<real_type> migration_occuring_R;
    std::vector<real_type> migration_occuring_Is;
    std::vector<real_type> migration_occuring_Rc;
    std::vector<real_type> beta;
    std::vector<real_type> birth_rate;
    std::vector<real_type> waning_from_E_short;
    std::vector<real_type> waning_from_E_long;
    std::vector<real_type> waning_from_I_short;
    std::vector<real_type> waning_from_I_long;
    std::vector<real_type> waning_from_R_short;
    std::vector<real_type> waning_from_R_long;
    std::vector<real_type> waning_from_Is_short;
    std::vector<real_type> waning_from_Is_long;
    std::vector<real_type> waning_from_Rc_short;
    std::vector<real_type> waning_from_Rc_long;
    std::vector<real_type> migration_S;
    std::vector<real_type> migration_E;
    std::vector<real_type> migration_I;
    std::vector<real_type> migration_R;
    std::vector<real_type> migration_Is;
    std::vector<real_type> migration_Rc;
    std::vector<real_type> beta_updated;
    std::vector<real_type> Births;
    std::vector<real_type> aging_into_S;
    std::vector<real_type> waning_to_E_long;
    std::vector<real_type> waning_to_E_unvaccinated;
    std::vector<real_type> waning_to_I_long;
    std::vector<real_type> waning_to_I_unvaccinated;
    std::vector<real_type> waning_to_R_long;
    std::vector<real_type> waning_to_R_unvaccinated;
    std::vector<real_type> waning_to_Is_long;
    std::vector<real_type> waning_to_Is_unvaccinated;
    std::vector<real_type> waning_to_Rc_long;
    std::vector<real_type> waning_to_Rc_unvaccinated;
    std::vector<real_type> S_after_aging;
    std::vector<real_type> vaccinating_out_of_S;
    std::vector<real_type> E_after_waning;
    std::vector<real_type> I_after_waning;
    std::vector<real_type> R_after_waning;
    std::vector<real_type> Is_after_waning;
    std::vector<real_type> Rc_after_waning;
    std::vector<real_type> E_available;
    std::vector<real_type> I_available;
    std::vector<real_type> R_available;
    std::vector<real_type> Rc_available;
    std::vector<real_type> Is_available;
    std::vector<real_type> vaccinating_into_S;
    std::vector<real_type> incubated;
    std::vector<real_type> recovered_I_to_R;
    std::vector<real_type> recovered_from_Is;
    std::vector<real_type> E_death;
    std::vector<real_type> I_death;
    std::vector<real_type> R_death;
    std::vector<real_type> Is_death;
    std::vector<real_type> Rc_death;
    std::vector<real_type> S_after_vaccination;
    std::vector<real_type> inf_weighted;
    std::vector<real_type> into_I;
    std::vector<real_type> recovered_Is_to_R;
    std::vector<real_type> waning_from_S_short;
    std::vector<real_type> waning_from_S_long;
    std::vector<real_type> infectious_source;
    std::vector<real_type> into_Is;
    std::vector<real_type> recovered_Is_to_Rc;
    std::vector<real_type> waning_to_S_long;
    std::vector<real_type> waning_to_S_unvaccinated;
    std::vector<real_type> lambda_contact;
    std::vector<real_type> S_after_waning;
    std::vector<real_type> S_available;
    std::vector<real_type> S_death;
    std::vector<real_type> ngm_unfolded;
    std::vector<real_type> Npop_age;
    std::vector<real_type> lambda_raw;
    std::vector<real_type> ngm;
    std::vector<real_type> lambda;
    std::vector<real_type> lambda_S;
  };
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const int n_age = dust2::r::read_int(parameters, "n_age", 1);
    const int n_vacc = dust2::r::read_int(parameters, "n_vacc", 1);
    const int n_risk = dust2::r::read_int(parameters, "n_risk", 1);
    const real_type incubation_rate = dust2::r::read_real(parameters, "incubation_rate");
    const real_type recovery_rate = dust2::r::read_real(parameters, "recovery_rate");
    const real_type natural_immunity_waning = dust2::r::read_real(parameters, "natural_immunity_waning");
    const real_type severe_recovery_rate = dust2::r::read_real(parameters, "severe_recovery_rate");
    const int no_R0_changes = dust2::r::read_int(parameters, "no_R0_changes");
    const int no_seeded_changes = dust2::r::read_int(parameters, "no_seeded_changes");
    const int no_death_changes = dust2::r::read_int(parameters, "no_death_changes");
    const real_type simp_birth_death = dust2::r::read_real(parameters, "simp_birth_death", 1);
    const int no_birth_changes = dust2::r::read_int(parameters, "no_birth_changes");
    const real_type repro_low = dust2::r::read_real(parameters, "repro_low");
    const real_type repro_high = dust2::r::read_real(parameters, "repro_high");
    const real_type age_maternal_protection_ends = dust2::r::read_real(parameters, "age_maternal_protection_ends");
    const real_type protection_weight_vacc = dust2::r::read_real(parameters, "protection_weight_vacc");
    const real_type protection_weight_rec = dust2::r::read_real(parameters, "protection_weight_rec");
    const int no_vacc_changes = dust2::r::read_int(parameters, "no_vacc_changes");
    const int no_migration_changes = dust2::r::read_int(parameters, "no_migration_changes");
    dim.migration_distribution.set({static_cast<size_t>(6)});
    dim.S_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is_available.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.new_case.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_occuring_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.inf_weighted.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.infectious_source.set({static_cast<size_t>(n_age)});
    dim.lambda_contact.set({static_cast<size_t>(n_age), static_cast<size_t>(n_age)});
    dim.lambda_raw.set({static_cast<size_t>(n_age)});
    dim.ngm_unfolded.set({static_cast<size_t>(n_age), static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.ngm.set({static_cast<size_t>(n_age)});
    dim.Reff_age.set({static_cast<size_t>(n_age)});
    dim.seeded_actual.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Npop_age.set({static_cast<size_t>(n_age)});
    dim.repro_weight.set({static_cast<size_t>(n_age)});
    dim.S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.S0.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I0.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rpop0.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.prop_complications.set({static_cast<size_t>(n_age)});
    dim.beta_updated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.age_vaccination_beta_modifier.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.prop_severe.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.cfr_normal.set({static_cast<size_t>(n_age)});
    dim.cfr_severe.set({static_cast<size_t>(n_age)});
    dim.beta.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.infectious_period.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.lambda.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.tt_R0.set({static_cast<size_t>(no_R0_changes)});
    dim.R0.set({static_cast<size_t>(no_R0_changes)});
    dim.contact_matrix.set({static_cast<size_t>(n_age), static_cast<size_t>(n_age)});
    dim.lambda_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.incubated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.tt_seeded.set({static_cast<size_t>(no_seeded_changes)});
    dim.seeded.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk), static_cast<size_t>(no_seeded_changes)});
    dim.t_seeded.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.into_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.into_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.recovered_I_to_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.recovered_from_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.recovered_Is_to_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.recovered_Is_to_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_rate.set({static_cast<size_t>(n_age)});
    dim.aging_into_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_into_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_into_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_into_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_into_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_into_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.aging_out_of_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Npop_age_risk.set({static_cast<size_t>(n_age), static_cast<size_t>(n_risk)});
    dim.prop_maternal_vaccinated.set({static_cast<size_t>(n_risk)});
    dim.prop_maternal_natural.set({static_cast<size_t>(n_risk)});
    dim.vaccinated_mums.set({static_cast<size_t>(n_risk)});
    dim.antibody_mums.set({static_cast<size_t>(n_risk)});
    dim.tt_vaccination_coverage.set({static_cast<size_t>(no_vacc_changes)});
    dim.vaccination_coverage.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk), static_cast<size_t>(no_vacc_changes)});
    dim.vaccination_prop.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_S_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_S_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_S_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_S_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_E_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_E_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_E_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_E_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_I_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_I_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_I_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_I_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_R_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_R_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_R_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_R_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_Is_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_Is_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_Is_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_Is_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_Rc_short.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_Rc_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_from_Rc_long.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.waning_to_Rc_unvaccinated.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.short_term_waning.set({static_cast<size_t>(n_vacc)});
    dim.long_term_waning.set({static_cast<size_t>(n_vacc)});
    dim.vaccinating_into_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_into_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_into_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_into_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_into_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_into_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.vaccinating_out_of_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Births.set({static_cast<size_t>(n_age)});
    dim.reproductive_population.set({static_cast<size_t>(n_age)});
    dim.birth_rate.set({static_cast<size_t>(n_risk)});
    dim.tt_birth_changes.set({static_cast<size_t>(no_birth_changes)});
    dim.tt_death_changes.set({static_cast<size_t>(no_death_changes)});
    dim.background_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_risk)});
    dim.Npop_background_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_risk)});
    dim.crude_birth.set({static_cast<size_t>(n_age), static_cast<size_t>(no_birth_changes)});
    dim.crude_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_risk), static_cast<size_t>(no_death_changes)});
    dim.birth_int.set({static_cast<size_t>(n_age)});
    dim.death_int.set({static_cast<size_t>(n_age), static_cast<size_t>(n_risk)});
    dim.S_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc_death.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.tt_migration.set({static_cast<size_t>(no_migration_changes)});
    dim.migration_in_number.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk), static_cast<size_t>(no_migration_changes)});
    dim.migration_distribution_values.set({static_cast<size_t>(6), static_cast<size_t>(no_migration_changes)});
    dim.migration.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_adjusted.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_S.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_E.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_I.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_R.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_Is.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.migration_Rc.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.S_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc_after_aging.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.S_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc_after_vaccination.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.S_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.E_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.I_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.R_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Is_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    dim.Rc_after_waning.set({static_cast<size_t>(n_age), static_cast<size_t>(n_vacc), static_cast<size_t>(n_risk)});
    std::vector<real_type> S0(dim.S0.size);
    dust2::r::read_real_array(parameters, dim.S0, S0.data(), "S0", true);
    std::vector<real_type> I0(dim.I0.size);
    dust2::r::read_real_array(parameters, dim.I0, I0.data(), "I0", true);
    std::vector<real_type> Rpop0(dim.Rpop0.size);
    dust2::r::read_real_array(parameters, dim.Rpop0, Rpop0.data(), "Rpop0", true);
    std::vector<real_type> cfr_normal(dim.cfr_normal.size);
    dust2::r::read_real_array(parameters, dim.cfr_normal, cfr_normal.data(), "cfr_normal", true);
    std::vector<real_type> prop_severe(dim.prop_severe.size);
    dust2::r::read_real_array(parameters, dim.prop_severe, prop_severe.data(), "prop_severe", true);
    std::vector<real_type> cfr_severe(dim.cfr_severe.size);
    dust2::r::read_real_array(parameters, dim.cfr_severe, cfr_severe.data(), "cfr_severe", true);
    std::vector<real_type> prop_complications(dim.prop_complications.size);
    dust2::r::read_real_array(parameters, dim.prop_complications, prop_complications.data(), "prop_complications", true);
    std::vector<real_type> R0(dim.R0.size);
    dust2::r::read_real_array(parameters, dim.R0, R0.data(), "R0", true);
    std::vector<real_type> tt_R0(dim.tt_R0.size);
    dust2::r::read_real_array(parameters, dim.tt_R0, tt_R0.data(), "tt_R0", true);
    std::vector<real_type> contact_matrix(dim.contact_matrix.size);
    dust2::r::read_real_array(parameters, dim.contact_matrix, contact_matrix.data(), "contact_matrix", true);
    std::vector<real_type> seeded(dim.seeded.size);
    dust2::r::read_real_array(parameters, dim.seeded, seeded.data(), "seeded", true);
    std::vector<real_type> tt_seeded(dim.tt_seeded.size);
    dust2::r::read_real_array(parameters, dim.tt_seeded, tt_seeded.data(), "tt_seeded", true);
    std::vector<real_type> crude_death(dim.crude_death.size);
    dust2::r::read_real_array(parameters, dim.crude_death, crude_death.data(), "crude_death", true);
    std::vector<real_type> tt_death_changes(dim.tt_death_changes.size);
    dust2::r::read_real_array(parameters, dim.tt_death_changes, tt_death_changes.data(), "tt_death_changes", true);
    std::vector<real_type> crude_birth(dim.crude_birth.size);
    dust2::r::read_real_array(parameters, dim.crude_birth, crude_birth.data(), "crude_birth", true);
    std::vector<real_type> tt_birth_changes(dim.tt_birth_changes.size);
    dust2::r::read_real_array(parameters, dim.tt_birth_changes, tt_birth_changes.data(), "tt_birth_changes", true);
    std::vector<real_type> aging_rate(dim.aging_rate.size);
    dust2::r::read_real_array(parameters, dim.aging_rate, aging_rate.data(), "aging_rate", true);
    std::vector<real_type> tt_vaccination_coverage(dim.tt_vaccination_coverage.size);
    dust2::r::read_real_array(parameters, dim.tt_vaccination_coverage, tt_vaccination_coverage.data(), "tt_vaccination_coverage", true);
    std::vector<real_type> vaccination_coverage(dim.vaccination_coverage.size);
    dust2::r::read_real_array(parameters, dim.vaccination_coverage, vaccination_coverage.data(), "vaccination_coverage", true);
    std::vector<real_type> age_vaccination_beta_modifier(dim.age_vaccination_beta_modifier.size);
    dust2::r::read_real_array(parameters, dim.age_vaccination_beta_modifier, age_vaccination_beta_modifier.data(), "age_vaccination_beta_modifier", true);
    std::vector<real_type> tt_migration(dim.tt_migration.size);
    dust2::r::read_real_array(parameters, dim.tt_migration, tt_migration.data(), "tt_migration", true);
    std::vector<real_type> migration_in_number(dim.migration_in_number.size);
    dust2::r::read_real_array(parameters, dim.migration_in_number, migration_in_number.data(), "migration_in_number", true);
    std::vector<real_type> migration_distribution_values(dim.migration_distribution_values.size);
    dust2::r::read_real_array(parameters, dim.migration_distribution_values, migration_distribution_values.data(), "migration_distribution_values", true);
    std::vector<real_type> repro_weight(dim.repro_weight.size);
    dust2::r::read_real_array(parameters, dim.repro_weight, repro_weight.data(), "repro_weight", true);
    std::vector<real_type> short_term_waning(dim.short_term_waning.size);
    dust2::r::read_real_array(parameters, dim.short_term_waning, short_term_waning.data(), "short_term_waning", true);
    std::vector<real_type> long_term_waning(dim.long_term_waning.size);
    dust2::r::read_real_array(parameters, dim.long_term_waning, long_term_waning.data(), "long_term_waning", true);
    const auto interpolate_migration = dust2::interpolate::InterpolateConstantArray<real_type, 3>(tt_migration, migration_in_number, dim.migration, "tt_migration", "migration_in_number");
    const auto interpolate_migration_distribution = dust2::interpolate::InterpolateConstantArray<real_type, 1>(tt_migration, migration_distribution_values, dim.migration_distribution, "tt_migration", "migration_distribution_values");
    const auto interpolate_t_R0 = dust2::interpolate::InterpolateConstant(tt_R0, R0, "tt_R0", "R0");
    const auto interpolate_t_seeded = dust2::interpolate::InterpolateConstantArray<real_type, 3>(tt_seeded, seeded, dim.t_seeded, "tt_seeded", "seeded");
    const auto interpolate_death_int = dust2::interpolate::InterpolateConstantArray<real_type, 2>(tt_death_changes, crude_death, dim.death_int, "tt_death_changes", "crude_death");
    const auto interpolate_birth_int = dust2::interpolate::InterpolateConstantArray<real_type, 1>(tt_birth_changes, crude_birth, dim.birth_int, "tt_birth_changes", "crude_birth");
    const auto interpolate_vaccination_prop = dust2::interpolate::InterpolateConstantArray<real_type, 3>(tt_vaccination_coverage, vaccination_coverage, dim.vaccination_prop, "tt_vaccination_coverage", "vaccination_coverage");
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"total_pop", {}},
      {"dead_all", {}},
      {"births_all", {}},
      {"Reff", {}},
      {"death_rate", {}},
      {"S", std::vector<size_t>(dim.S.dim.begin(), dim.S.dim.end())},
      {"E", std::vector<size_t>(dim.E.dim.begin(), dim.E.dim.end())},
      {"I", std::vector<size_t>(dim.I.dim.begin(), dim.I.dim.end())},
      {"R", std::vector<size_t>(dim.R.dim.begin(), dim.R.dim.end())},
      {"Is", std::vector<size_t>(dim.Is.dim.begin(), dim.Is.dim.end())},
      {"Rc", std::vector<size_t>(dim.Rc.dim.begin(), dim.Rc.dim.end())},
      {"new_case", std::vector<size_t>(dim.new_case.dim.begin(), dim.new_case.dim.end())},
      {"Reff_age", std::vector<size_t>(dim.Reff_age.dim.begin(), dim.Reff_age.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, n_age, n_vacc, n_risk, incubation_rate, recovery_rate, natural_immunity_waning, severe_recovery_rate, no_R0_changes, no_seeded_changes, no_death_changes, simp_birth_death, no_birth_changes, repro_low, repro_high, age_maternal_protection_ends, protection_weight_vacc, protection_weight_rec, no_vacc_changes, no_migration_changes, S0, I0, Rpop0, cfr_normal, prop_severe, cfr_severe, prop_complications, R0, tt_R0, contact_matrix, seeded, tt_seeded, crude_death, tt_death_changes, crude_birth, tt_birth_changes, aging_rate, tt_vaccination_coverage, vaccination_coverage, age_vaccination_beta_modifier, tt_migration, migration_in_number, migration_distribution_values, repro_weight, short_term_waning, long_term_waning, interpolate_migration, interpolate_migration_distribution, interpolate_t_R0, interpolate_t_seeded, interpolate_death_int, interpolate_birth_int, interpolate_vaccination_prop};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> Npop_age_risk(shared.dim.Npop_age_risk.size);
    std::vector<real_type> vaccinated_mums(shared.dim.vaccinated_mums.size);
    std::vector<real_type> antibody_mums(shared.dim.antibody_mums.size);
    std::vector<real_type> aging_out_of_S(shared.dim.aging_out_of_S.size);
    std::vector<real_type> aging_into_E(shared.dim.aging_into_E.size);
    std::vector<real_type> aging_out_of_E(shared.dim.aging_out_of_E.size);
    std::vector<real_type> aging_into_I(shared.dim.aging_into_I.size);
    std::vector<real_type> aging_out_of_I(shared.dim.aging_out_of_I.size);
    std::vector<real_type> aging_into_R(shared.dim.aging_into_R.size);
    std::vector<real_type> aging_out_of_R(shared.dim.aging_out_of_R.size);
    std::vector<real_type> aging_into_Is(shared.dim.aging_into_Is.size);
    std::vector<real_type> aging_out_of_Is(shared.dim.aging_out_of_Is.size);
    std::vector<real_type> aging_into_Rc(shared.dim.aging_into_Rc.size);
    std::vector<real_type> aging_out_of_Rc(shared.dim.aging_out_of_Rc.size);
    std::vector<real_type> reproductive_population(shared.dim.reproductive_population.size);
    std::vector<real_type> E_after_aging(shared.dim.E_after_aging.size);
    std::vector<real_type> I_after_aging(shared.dim.I_after_aging.size);
    std::vector<real_type> R_after_aging(shared.dim.R_after_aging.size);
    std::vector<real_type> Is_after_aging(shared.dim.Is_after_aging.size);
    std::vector<real_type> Rc_after_aging(shared.dim.Rc_after_aging.size);
    std::vector<real_type> prop_maternal_vaccinated(shared.dim.prop_maternal_vaccinated.size);
    std::vector<real_type> prop_maternal_natural(shared.dim.prop_maternal_natural.size);
    std::vector<real_type> migration(shared.dim.migration.size);
    std::vector<real_type> migration_distribution(shared.dim.migration_distribution.size);
    std::vector<real_type> t_seeded(shared.dim.t_seeded.size);
    std::vector<real_type> death_int(shared.dim.death_int.size);
    std::vector<real_type> birth_int(shared.dim.birth_int.size);
    std::vector<real_type> vaccination_prop(shared.dim.vaccination_prop.size);
    std::vector<real_type> waning_R(shared.dim.waning_R.size);
    std::vector<real_type> waning_Rc(shared.dim.waning_Rc.size);
    std::vector<real_type> vaccinating_out_of_E(shared.dim.vaccinating_out_of_E.size);
    std::vector<real_type> vaccinating_out_of_I(shared.dim.vaccinating_out_of_I.size);
    std::vector<real_type> vaccinating_out_of_R(shared.dim.vaccinating_out_of_R.size);
    std::vector<real_type> vaccinating_out_of_Is(shared.dim.vaccinating_out_of_Is.size);
    std::vector<real_type> vaccinating_out_of_Rc(shared.dim.vaccinating_out_of_Rc.size);
    std::vector<real_type> seeded_actual(shared.dim.seeded_actual.size);
    std::vector<real_type> background_death(shared.dim.background_death.size);
    std::vector<real_type> vaccinating_into_E(shared.dim.vaccinating_into_E.size);
    std::vector<real_type> vaccinating_into_I(shared.dim.vaccinating_into_I.size);
    std::vector<real_type> vaccinating_into_R(shared.dim.vaccinating_into_R.size);
    std::vector<real_type> vaccinating_into_Is(shared.dim.vaccinating_into_Is.size);
    std::vector<real_type> vaccinating_into_Rc(shared.dim.vaccinating_into_Rc.size);
    std::vector<real_type> migration_adjusted(shared.dim.migration_adjusted.size);
    std::vector<real_type> infectious_period(shared.dim.infectious_period.size);
    std::vector<real_type> Npop_background_death(shared.dim.Npop_background_death.size);
    std::vector<real_type> E_after_vaccination(shared.dim.E_after_vaccination.size);
    std::vector<real_type> I_after_vaccination(shared.dim.I_after_vaccination.size);
    std::vector<real_type> R_after_vaccination(shared.dim.R_after_vaccination.size);
    std::vector<real_type> Is_after_vaccination(shared.dim.Is_after_vaccination.size);
    std::vector<real_type> Rc_after_vaccination(shared.dim.Rc_after_vaccination.size);
    std::vector<real_type> migration_occuring_S(shared.dim.migration_occuring_S.size);
    std::vector<real_type> migration_occuring_E(shared.dim.migration_occuring_E.size);
    std::vector<real_type> migration_occuring_I(shared.dim.migration_occuring_I.size);
    std::vector<real_type> migration_occuring_R(shared.dim.migration_occuring_R.size);
    std::vector<real_type> migration_occuring_Is(shared.dim.migration_occuring_Is.size);
    std::vector<real_type> migration_occuring_Rc(shared.dim.migration_occuring_Rc.size);
    std::vector<real_type> beta(shared.dim.beta.size);
    std::vector<real_type> birth_rate(shared.dim.birth_rate.size);
    std::vector<real_type> waning_from_E_short(shared.dim.waning_from_E_short.size);
    std::vector<real_type> waning_from_E_long(shared.dim.waning_from_E_long.size);
    std::vector<real_type> waning_from_I_short(shared.dim.waning_from_I_short.size);
    std::vector<real_type> waning_from_I_long(shared.dim.waning_from_I_long.size);
    std::vector<real_type> waning_from_R_short(shared.dim.waning_from_R_short.size);
    std::vector<real_type> waning_from_R_long(shared.dim.waning_from_R_long.size);
    std::vector<real_type> waning_from_Is_short(shared.dim.waning_from_Is_short.size);
    std::vector<real_type> waning_from_Is_long(shared.dim.waning_from_Is_long.size);
    std::vector<real_type> waning_from_Rc_short(shared.dim.waning_from_Rc_short.size);
    std::vector<real_type> waning_from_Rc_long(shared.dim.waning_from_Rc_long.size);
    std::vector<real_type> migration_S(shared.dim.migration_S.size);
    std::vector<real_type> migration_E(shared.dim.migration_E.size);
    std::vector<real_type> migration_I(shared.dim.migration_I.size);
    std::vector<real_type> migration_R(shared.dim.migration_R.size);
    std::vector<real_type> migration_Is(shared.dim.migration_Is.size);
    std::vector<real_type> migration_Rc(shared.dim.migration_Rc.size);
    std::vector<real_type> beta_updated(shared.dim.beta_updated.size);
    std::vector<real_type> Births(shared.dim.Births.size);
    std::vector<real_type> aging_into_S(shared.dim.aging_into_S.size);
    std::vector<real_type> waning_to_E_long(shared.dim.waning_to_E_long.size);
    std::vector<real_type> waning_to_E_unvaccinated(shared.dim.waning_to_E_unvaccinated.size);
    std::vector<real_type> waning_to_I_long(shared.dim.waning_to_I_long.size);
    std::vector<real_type> waning_to_I_unvaccinated(shared.dim.waning_to_I_unvaccinated.size);
    std::vector<real_type> waning_to_R_long(shared.dim.waning_to_R_long.size);
    std::vector<real_type> waning_to_R_unvaccinated(shared.dim.waning_to_R_unvaccinated.size);
    std::vector<real_type> waning_to_Is_long(shared.dim.waning_to_Is_long.size);
    std::vector<real_type> waning_to_Is_unvaccinated(shared.dim.waning_to_Is_unvaccinated.size);
    std::vector<real_type> waning_to_Rc_long(shared.dim.waning_to_Rc_long.size);
    std::vector<real_type> waning_to_Rc_unvaccinated(shared.dim.waning_to_Rc_unvaccinated.size);
    std::vector<real_type> S_after_aging(shared.dim.S_after_aging.size);
    std::vector<real_type> vaccinating_out_of_S(shared.dim.vaccinating_out_of_S.size);
    std::vector<real_type> E_after_waning(shared.dim.E_after_waning.size);
    std::vector<real_type> I_after_waning(shared.dim.I_after_waning.size);
    std::vector<real_type> R_after_waning(shared.dim.R_after_waning.size);
    std::vector<real_type> Is_after_waning(shared.dim.Is_after_waning.size);
    std::vector<real_type> Rc_after_waning(shared.dim.Rc_after_waning.size);
    std::vector<real_type> E_available(shared.dim.E_available.size);
    std::vector<real_type> I_available(shared.dim.I_available.size);
    std::vector<real_type> R_available(shared.dim.R_available.size);
    std::vector<real_type> Rc_available(shared.dim.Rc_available.size);
    std::vector<real_type> Is_available(shared.dim.Is_available.size);
    std::vector<real_type> vaccinating_into_S(shared.dim.vaccinating_into_S.size);
    std::vector<real_type> incubated(shared.dim.incubated.size);
    std::vector<real_type> recovered_I_to_R(shared.dim.recovered_I_to_R.size);
    std::vector<real_type> recovered_from_Is(shared.dim.recovered_from_Is.size);
    std::vector<real_type> E_death(shared.dim.E_death.size);
    std::vector<real_type> I_death(shared.dim.I_death.size);
    std::vector<real_type> R_death(shared.dim.R_death.size);
    std::vector<real_type> Is_death(shared.dim.Is_death.size);
    std::vector<real_type> Rc_death(shared.dim.Rc_death.size);
    std::vector<real_type> S_after_vaccination(shared.dim.S_after_vaccination.size);
    std::vector<real_type> inf_weighted(shared.dim.inf_weighted.size);
    std::vector<real_type> into_I(shared.dim.into_I.size);
    std::vector<real_type> recovered_Is_to_R(shared.dim.recovered_Is_to_R.size);
    std::vector<real_type> waning_from_S_short(shared.dim.waning_from_S_short.size);
    std::vector<real_type> waning_from_S_long(shared.dim.waning_from_S_long.size);
    std::vector<real_type> infectious_source(shared.dim.infectious_source.size);
    std::vector<real_type> into_Is(shared.dim.into_Is.size);
    std::vector<real_type> recovered_Is_to_Rc(shared.dim.recovered_Is_to_Rc.size);
    std::vector<real_type> waning_to_S_long(shared.dim.waning_to_S_long.size);
    std::vector<real_type> waning_to_S_unvaccinated(shared.dim.waning_to_S_unvaccinated.size);
    std::vector<real_type> lambda_contact(shared.dim.lambda_contact.size);
    std::vector<real_type> S_after_waning(shared.dim.S_after_waning.size);
    std::vector<real_type> S_available(shared.dim.S_available.size);
    std::vector<real_type> S_death(shared.dim.S_death.size);
    std::vector<real_type> ngm_unfolded(shared.dim.ngm_unfolded.size);
    std::vector<real_type> Npop_age(shared.dim.Npop_age.size);
    std::vector<real_type> lambda_raw(shared.dim.lambda_raw.size);
    std::vector<real_type> ngm(shared.dim.ngm.size);
    std::vector<real_type> lambda(shared.dim.lambda.size);
    std::vector<real_type> lambda_S(shared.dim.lambda_S.size);
    return internal_state{Npop_age_risk, vaccinated_mums, antibody_mums, aging_out_of_S, aging_into_E, aging_out_of_E, aging_into_I, aging_out_of_I, aging_into_R, aging_out_of_R, aging_into_Is, aging_out_of_Is, aging_into_Rc, aging_out_of_Rc, reproductive_population, E_after_aging, I_after_aging, R_after_aging, Is_after_aging, Rc_after_aging, prop_maternal_vaccinated, prop_maternal_natural, migration, migration_distribution, t_seeded, death_int, birth_int, vaccination_prop, waning_R, waning_Rc, vaccinating_out_of_E, vaccinating_out_of_I, vaccinating_out_of_R, vaccinating_out_of_Is, vaccinating_out_of_Rc, seeded_actual, background_death, vaccinating_into_E, vaccinating_into_I, vaccinating_into_R, vaccinating_into_Is, vaccinating_into_Rc, migration_adjusted, infectious_period, Npop_background_death, E_after_vaccination, I_after_vaccination, R_after_vaccination, Is_after_vaccination, Rc_after_vaccination, migration_occuring_S, migration_occuring_E, migration_occuring_I, migration_occuring_R, migration_occuring_Is, migration_occuring_Rc, beta, birth_rate, waning_from_E_short, waning_from_E_long, waning_from_I_short, waning_from_I_long, waning_from_R_short, waning_from_R_long, waning_from_Is_short, waning_from_Is_long, waning_from_Rc_short, waning_from_Rc_long, migration_S, migration_E, migration_I, migration_R, migration_Is, migration_Rc, beta_updated, Births, aging_into_S, waning_to_E_long, waning_to_E_unvaccinated, waning_to_I_long, waning_to_I_unvaccinated, waning_to_R_long, waning_to_R_unvaccinated, waning_to_Is_long, waning_to_Is_unvaccinated, waning_to_Rc_long, waning_to_Rc_unvaccinated, S_after_aging, vaccinating_out_of_S, E_after_waning, I_after_waning, R_after_waning, Is_after_waning, Rc_after_waning, E_available, I_available, R_available, Rc_available, Is_available, vaccinating_into_S, incubated, recovered_I_to_R, recovered_from_Is, E_death, I_death, R_death, Is_death, Rc_death, S_after_vaccination, inf_weighted, into_I, recovered_Is_to_R, waning_from_S_short, waning_from_S_long, infectious_source, into_Is, recovered_Is_to_Rc, waning_to_S_long, waning_to_S_unvaccinated, lambda_contact, S_after_waning, S_available, S_death, ngm_unfolded, Npop_age, lambda_raw, ngm, lambda, lambda_S};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.incubation_rate = dust2::r::read_real(parameters, "incubation_rate", shared.incubation_rate);
    shared.recovery_rate = dust2::r::read_real(parameters, "recovery_rate", shared.recovery_rate);
    shared.natural_immunity_waning = dust2::r::read_real(parameters, "natural_immunity_waning", shared.natural_immunity_waning);
    shared.severe_recovery_rate = dust2::r::read_real(parameters, "severe_recovery_rate", shared.severe_recovery_rate);
    shared.simp_birth_death = dust2::r::read_real(parameters, "simp_birth_death", shared.simp_birth_death);
    shared.repro_low = dust2::r::read_real(parameters, "repro_low", shared.repro_low);
    shared.repro_high = dust2::r::read_real(parameters, "repro_high", shared.repro_high);
    shared.age_maternal_protection_ends = dust2::r::read_real(parameters, "age_maternal_protection_ends", shared.age_maternal_protection_ends);
    shared.protection_weight_vacc = dust2::r::read_real(parameters, "protection_weight_vacc", shared.protection_weight_vacc);
    shared.protection_weight_rec = dust2::r::read_real(parameters, "protection_weight_rec", shared.protection_weight_rec);
    dust2::r::read_real_array(parameters, shared.dim.S0, shared.S0.data(), "S0", false);
    dust2::r::read_real_array(parameters, shared.dim.I0, shared.I0.data(), "I0", false);
    dust2::r::read_real_array(parameters, shared.dim.Rpop0, shared.Rpop0.data(), "Rpop0", false);
    dust2::r::read_real_array(parameters, shared.dim.cfr_normal, shared.cfr_normal.data(), "cfr_normal", false);
    dust2::r::read_real_array(parameters, shared.dim.prop_severe, shared.prop_severe.data(), "prop_severe", false);
    dust2::r::read_real_array(parameters, shared.dim.cfr_severe, shared.cfr_severe.data(), "cfr_severe", false);
    dust2::r::read_real_array(parameters, shared.dim.prop_complications, shared.prop_complications.data(), "prop_complications", false);
    dust2::r::read_real_array(parameters, shared.dim.R0, shared.R0.data(), "R0", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_R0, shared.tt_R0.data(), "tt_R0", false);
    dust2::r::read_real_array(parameters, shared.dim.contact_matrix, shared.contact_matrix.data(), "contact_matrix", false);
    dust2::r::read_real_array(parameters, shared.dim.seeded, shared.seeded.data(), "seeded", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_seeded, shared.tt_seeded.data(), "tt_seeded", false);
    dust2::r::read_real_array(parameters, shared.dim.crude_death, shared.crude_death.data(), "crude_death", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_death_changes, shared.tt_death_changes.data(), "tt_death_changes", false);
    dust2::r::read_real_array(parameters, shared.dim.crude_birth, shared.crude_birth.data(), "crude_birth", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_birth_changes, shared.tt_birth_changes.data(), "tt_birth_changes", false);
    dust2::r::read_real_array(parameters, shared.dim.aging_rate, shared.aging_rate.data(), "aging_rate", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_vaccination_coverage, shared.tt_vaccination_coverage.data(), "tt_vaccination_coverage", false);
    dust2::r::read_real_array(parameters, shared.dim.vaccination_coverage, shared.vaccination_coverage.data(), "vaccination_coverage", false);
    dust2::r::read_real_array(parameters, shared.dim.age_vaccination_beta_modifier, shared.age_vaccination_beta_modifier.data(), "age_vaccination_beta_modifier", false);
    dust2::r::read_real_array(parameters, shared.dim.tt_migration, shared.tt_migration.data(), "tt_migration", false);
    dust2::r::read_real_array(parameters, shared.dim.migration_in_number, shared.migration_in_number.data(), "migration_in_number", false);
    dust2::r::read_real_array(parameters, shared.dim.migration_distribution_values, shared.migration_distribution_values.data(), "migration_distribution_values", false);
    dust2::r::read_real_array(parameters, shared.dim.repro_weight, shared.repro_weight.data(), "repro_weight", false);
    dust2::r::read_real_array(parameters, shared.dim.short_term_waning, shared.short_term_waning.data(), "short_term_waning", false);
    dust2::r::read_real_array(parameters, shared.dim.long_term_waning, shared.long_term_waning.data(), "long_term_waning", false);
    const auto interpolate_migration = dust2::interpolate::InterpolateConstantArray<real_type, 3>(shared.tt_migration, shared.migration_in_number, shared.dim.migration, "tt_migration", "migration_in_number");
    const auto interpolate_migration_distribution = dust2::interpolate::InterpolateConstantArray<real_type, 1>(shared.tt_migration, shared.migration_distribution_values, shared.dim.migration_distribution, "tt_migration", "migration_distribution_values");
    const auto interpolate_t_R0 = dust2::interpolate::InterpolateConstant(shared.tt_R0, shared.R0, "tt_R0", "R0");
    const auto interpolate_t_seeded = dust2::interpolate::InterpolateConstantArray<real_type, 3>(shared.tt_seeded, shared.seeded, shared.dim.t_seeded, "tt_seeded", "seeded");
    const auto interpolate_death_int = dust2::interpolate::InterpolateConstantArray<real_type, 2>(shared.tt_death_changes, shared.crude_death, shared.dim.death_int, "tt_death_changes", "crude_death");
    const auto interpolate_birth_int = dust2::interpolate::InterpolateConstantArray<real_type, 1>(shared.tt_birth_changes, shared.crude_birth, shared.dim.birth_int, "tt_birth_changes", "crude_birth");
    const auto interpolate_vaccination_prop = dust2::interpolate::InterpolateConstantArray<real_type, 3>(shared.tt_vaccination_coverage, shared.vaccination_coverage, shared.dim.vaccination_prop, "tt_vaccination_coverage", "vaccination_coverage");
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2] + 5] = shared.S0[i - 1 + (j - 1) * shared.dim.S0.mult[1] + (k - 1) * shared.dim.S0.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2] + shared.odin.offset.state[6]] = 0;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2] + shared.odin.offset.state[7]] = shared.I0[i - 1 + (j - 1) * shared.dim.I0.mult[1] + (k - 1) * shared.dim.I0.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2] + shared.odin.offset.state[8]] = shared.Rpop0[i - 1 + (j - 1) * shared.dim.Rpop0.mult[1] + (k - 1) * shared.dim.Rpop0.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2] + shared.odin.offset.state[9]] = 0;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2] + shared.odin.offset.state[10]] = 0;
        }
      }
    }
    state[0] = dust2::array::sum<real_type>(shared.S0.data(), shared.dim.S0) + dust2::array::sum<real_type>(shared.I0.data(), shared.dim.I0) + dust2::array::sum<real_type>(shared.Rpop0.data(), shared.dim.Rpop0);
    state[1] = 0;
    state[2] = 0;
    for (size_t i = 1; i <= shared.dim.new_case.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.new_case.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.new_case.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.new_case.mult[1] + (k - 1) * shared.dim.new_case.mult[2] + shared.odin.offset.state[11]] = shared.I0[i - 1 + (j - 1) * shared.dim.I0.mult[1] + (k - 1) * shared.dim.I0.mult[2]];
        }
      }
    }
    state[3] = shared.R0[0];
    for (size_t i = 1; i <= shared.dim.Reff_age.size; ++i) {
      state[i - 1 + shared.odin.offset.state[12]] = 0;
    }
    state[4] = 0;
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto * S = state + 5;
    const auto * E = state + shared.odin.offset.state[6];
    const auto * I = state + shared.odin.offset.state[7];
    const auto * R = state + shared.odin.offset.state[8];
    const auto * Is = state + shared.odin.offset.state[9];
    const auto * Rc = state + shared.odin.offset.state[10];
    const real_type N = dust2::array::sum<real_type>(S, shared.dim.S) + dust2::array::sum<real_type>(E, shared.dim.E) + dust2::array::sum<real_type>(I, shared.dim.I) + dust2::array::sum<real_type>(R, shared.dim.R) + dust2::array::sum<real_type>(Is, shared.dim.Is) + dust2::array::sum<real_type>(Rc, shared.dim.Rc);
    for (size_t i = 1; i <= shared.dim.Npop_age_risk.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Npop_age_risk.dim[1]; ++j) {
        internal.Npop_age_risk[i - 1 + (j - 1) * shared.dim.Npop_age_risk.mult[1]] = dust2::array::sum<real_type>(S, shared.dim.S, {i - 1, i - 1}, {0, shared.dim.S.dim[1] - 1}, {j - 1, j - 1}) + dust2::array::sum<real_type>(E, shared.dim.E, {i - 1, i - 1}, {0, shared.dim.E.dim[1] - 1}, {j - 1, j - 1}) + dust2::array::sum<real_type>(I, shared.dim.I, {i - 1, i - 1}, {0, shared.dim.I.dim[1] - 1}, {j - 1, j - 1}) + dust2::array::sum<real_type>(R, shared.dim.R, {i - 1, i - 1}, {0, shared.dim.R.dim[1] - 1}, {j - 1, j - 1}) + dust2::array::sum<real_type>(Is, shared.dim.Is, {i - 1, i - 1}, {0, shared.dim.Is.dim[1] - 1}, {j - 1, j - 1}) + dust2::array::sum<real_type>(Rc, shared.dim.Rc, {i - 1, i - 1}, {0, shared.dim.Rc.dim[1] - 1}, {j - 1, j - 1});
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinated_mums.size; ++i) {
      internal.vaccinated_mums[i - 1] = (shared.n_vacc <= 1 ? 0 : dust2::array::sum<real_type>(S, shared.dim.S, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(E, shared.dim.E, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(I, shared.dim.I, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(R, shared.dim.R, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(Is, shared.dim.Is, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(Rc, shared.dim.Rc, {shared.repro_low - 1, shared.repro_high - 1}, {1, shared.n_vacc - 1}, {i - 1, i - 1}));
    }
    for (size_t i = 1; i <= shared.dim.antibody_mums.size; ++i) {
      internal.antibody_mums[i - 1] = dust2::array::sum<real_type>(I, shared.dim.I, {shared.repro_low - 1, shared.repro_high - 1}, {0, shared.dim.I.dim[1] - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(R, shared.dim.R, {shared.repro_low - 1, shared.repro_high - 1}, {0, shared.dim.R.dim[1] - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(Is, shared.dim.Is, {shared.repro_low - 1, shared.repro_high - 1}, {0, shared.dim.Is.dim[1] - 1}, {i - 1, i - 1}) + dust2::array::sum<real_type>(Rc, shared.dim.Rc, {shared.repro_low - 1, shared.repro_high - 1}, {0, shared.dim.Rc.dim[1] - 1}, {i - 1, i - 1});
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_S.dim[2]; ++k) {
          internal.aging_out_of_S[i - 1 + (j - 1) * shared.dim.aging_out_of_S.mult[1] + (k - 1) * shared.dim.aging_out_of_S.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_E.dim[2]; ++k) {
          internal.aging_into_E[i - 1 + (j - 1) * shared.dim.aging_into_E.mult[1] + (k - 1) * shared.dim.aging_into_E.mult[2]] = (E[i - 1 - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, E[i - 1 - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_E.dim[2]; ++k) {
          internal.aging_out_of_E[i - 1 + (j - 1) * shared.dim.aging_out_of_E.mult[1] + (k - 1) * shared.dim.aging_out_of_E.mult[2]] = (E[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, E[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_I.dim[2]; ++k) {
          internal.aging_into_I[i - 1 + (j - 1) * shared.dim.aging_into_I.mult[1] + (k - 1) * shared.dim.aging_into_I.mult[2]] = (I[i - 1 - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, I[i - 1 - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_I.dim[2]; ++k) {
          internal.aging_out_of_I[i - 1 + (j - 1) * shared.dim.aging_out_of_I.mult[1] + (k - 1) * shared.dim.aging_out_of_I.mult[2]] = (I[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, I[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_R.dim[2]; ++k) {
          internal.aging_into_R[i - 1 + (j - 1) * shared.dim.aging_into_R.mult[1] + (k - 1) * shared.dim.aging_into_R.mult[2]] = (R[i - 1 - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, R[i - 1 - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_R.dim[2]; ++k) {
          internal.aging_out_of_R[i - 1 + (j - 1) * shared.dim.aging_out_of_R.mult[1] + (k - 1) * shared.dim.aging_out_of_R.mult[2]] = (R[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, R[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_Is.dim[2]; ++k) {
          internal.aging_into_Is[i - 1 + (j - 1) * shared.dim.aging_into_Is.mult[1] + (k - 1) * shared.dim.aging_into_Is.mult[2]] = (Is[i - 1 - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, Is[i - 1 - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_Is.dim[2]; ++k) {
          internal.aging_out_of_Is[i - 1 + (j - 1) * shared.dim.aging_out_of_Is.mult[1] + (k - 1) * shared.dim.aging_out_of_Is.mult[2]] = (Is[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, Is[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_Rc.dim[2]; ++k) {
          internal.aging_into_Rc[i - 1 + (j - 1) * shared.dim.aging_into_Rc.mult[1] + (k - 1) * shared.dim.aging_into_Rc.mult[2]] = (Rc[i - 1 - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, Rc[i - 1 - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>((shared.n_age - 1)); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_out_of_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_out_of_Rc.dim[2]; ++k) {
          internal.aging_out_of_Rc[i - 1 + (j - 1) * shared.dim.aging_out_of_Rc.mult[1] + (k - 1) * shared.dim.aging_out_of_Rc.mult[2]] = (Rc[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, Rc[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.reproductive_population.size; ++i) {
      internal.reproductive_population[i - 1] = (i >= shared.repro_low && i <= shared.repro_high ? dust2::array::sum<real_type>(S, shared.dim.S, {i - 1, i - 1}, {0, shared.dim.S.dim[1] - 1}, {0, shared.dim.S.dim[2] - 1}) * shared.repro_weight[i - 1] + dust2::array::sum<real_type>(E, shared.dim.E, {i - 1, i - 1}, {0, shared.dim.E.dim[1] - 1}, {0, shared.dim.E.dim[2] - 1}) * shared.repro_weight[i - 1] + dust2::array::sum<real_type>(I, shared.dim.I, {i - 1, i - 1}, {0, shared.dim.I.dim[1] - 1}, {0, shared.dim.I.dim[2] - 1}) * shared.repro_weight[i - 1] + dust2::array::sum<real_type>(R, shared.dim.R, {i - 1, i - 1}, {0, shared.dim.R.dim[1] - 1}, {0, shared.dim.R.dim[2] - 1}) * shared.repro_weight[i - 1] + dust2::array::sum<real_type>(Is, shared.dim.Is, {i - 1, i - 1}, {0, shared.dim.Is.dim[1] - 1}, {0, shared.dim.Is.dim[2] - 1}) * shared.repro_weight[i - 1] + dust2::array::sum<real_type>(Rc, shared.dim.Rc, {i - 1, i - 1}, {0, shared.dim.Rc.dim[1] - 1}, {0, shared.dim.Rc.dim[2] - 1}) * shared.repro_weight[i - 1] : 0);
    }
    for (size_t i = 1; i <= shared.dim.E_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E_after_aging.dim[2]; ++k) {
          internal.E_after_aging[i - 1 + (j - 1) * shared.dim.E_after_aging.mult[1] + (k - 1) * shared.dim.E_after_aging.mult[2]] = E[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]] + internal.aging_into_E[i - 1 + (j - 1) * shared.dim.aging_into_E.mult[1] + (k - 1) * shared.dim.aging_into_E.mult[2]] - internal.aging_out_of_E[i - 1 + (j - 1) * shared.dim.aging_out_of_E.mult[1] + (k - 1) * shared.dim.aging_out_of_E.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I_after_aging.dim[2]; ++k) {
          internal.I_after_aging[i - 1 + (j - 1) * shared.dim.I_after_aging.mult[1] + (k - 1) * shared.dim.I_after_aging.mult[2]] = I[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]] + internal.aging_into_I[i - 1 + (j - 1) * shared.dim.aging_into_I.mult[1] + (k - 1) * shared.dim.aging_into_I.mult[2]] - internal.aging_out_of_I[i - 1 + (j - 1) * shared.dim.aging_out_of_I.mult[1] + (k - 1) * shared.dim.aging_out_of_I.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R_after_aging.dim[2]; ++k) {
          internal.R_after_aging[i - 1 + (j - 1) * shared.dim.R_after_aging.mult[1] + (k - 1) * shared.dim.R_after_aging.mult[2]] = R[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]] + internal.aging_into_R[i - 1 + (j - 1) * shared.dim.aging_into_R.mult[1] + (k - 1) * shared.dim.aging_into_R.mult[2]] - internal.aging_out_of_R[i - 1 + (j - 1) * shared.dim.aging_out_of_R.mult[1] + (k - 1) * shared.dim.aging_out_of_R.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is_after_aging.dim[2]; ++k) {
          internal.Is_after_aging[i - 1 + (j - 1) * shared.dim.Is_after_aging.mult[1] + (k - 1) * shared.dim.Is_after_aging.mult[2]] = Is[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]] + internal.aging_into_Is[i - 1 + (j - 1) * shared.dim.aging_into_Is.mult[1] + (k - 1) * shared.dim.aging_into_Is.mult[2]] - internal.aging_out_of_Is[i - 1 + (j - 1) * shared.dim.aging_out_of_Is.mult[1] + (k - 1) * shared.dim.aging_out_of_Is.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc_after_aging.dim[2]; ++k) {
          internal.Rc_after_aging[i - 1 + (j - 1) * shared.dim.Rc_after_aging.mult[1] + (k - 1) * shared.dim.Rc_after_aging.mult[2]] = Rc[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]] + internal.aging_into_Rc[i - 1 + (j - 1) * shared.dim.aging_into_Rc.mult[1] + (k - 1) * shared.dim.aging_into_Rc.mult[2]] - internal.aging_out_of_Rc[i - 1 + (j - 1) * shared.dim.aging_out_of_Rc.mult[1] + (k - 1) * shared.dim.aging_out_of_Rc.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.prop_maternal_vaccinated.size; ++i) {
      internal.prop_maternal_vaccinated[i - 1] = (internal.reproductive_population[i - 1] <= 0 ? 0 : internal.vaccinated_mums[i - 1] / internal.reproductive_population[i - 1]);
    }
    for (size_t i = 1; i <= shared.dim.prop_maternal_natural.size; ++i) {
      internal.prop_maternal_natural[i - 1] = (internal.reproductive_population[i - 1] <= 0 ? 0 : internal.antibody_mums[i - 1] / internal.reproductive_population[i - 1]);
    }
    shared.interpolate_migration.eval(time, internal.migration);
    shared.interpolate_migration_distribution.eval(time, internal.migration_distribution);
    const real_type t_R0 = shared.interpolate_t_R0.eval(time);
    shared.interpolate_t_seeded.eval(time, internal.t_seeded);
    shared.interpolate_death_int.eval(time, internal.death_int);
    shared.interpolate_birth_int.eval(time, internal.birth_int);
    shared.interpolate_vaccination_prop.eval(time, internal.vaccination_prop);
    for (size_t i = 1; i <= shared.dim.waning_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_R.dim[2]; ++k) {
          internal.waning_R[i - 1 + (j - 1) * shared.dim.waning_R.mult[1] + (k - 1) * shared.dim.waning_R.mult[2]] = (internal.R_after_aging[i - 1 + (j - 1) * shared.dim.R_after_aging.mult[1] + (k - 1) * shared.dim.R_after_aging.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.R_after_aging[i - 1 + (j - 1) * shared.dim.R_after_aging.mult[1] + (k - 1) * shared.dim.R_after_aging.mult[2]], monty::math::max(monty::math::min(shared.natural_immunity_waning, static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_Rc.dim[2]; ++k) {
          internal.waning_Rc[i - 1 + (j - 1) * shared.dim.waning_Rc.mult[1] + (k - 1) * shared.dim.waning_Rc.mult[2]] = (internal.Rc_after_aging[i - 1 + (j - 1) * shared.dim.Rc_after_aging.mult[1] + (k - 1) * shared.dim.Rc_after_aging.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.Rc_after_aging[i - 1 + (j - 1) * shared.dim.Rc_after_aging.mult[1] + (k - 1) * shared.dim.Rc_after_aging.mult[2]], monty::math::max(monty::math::min(shared.natural_immunity_waning, static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_E.dim[2]; ++k) {
          internal.vaccinating_out_of_E[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_E.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]] = (1 == 1 ? 0 : (shared.n_vacc == 1 || j > shared.n_vacc - 2 || internal.aging_into_E[i - 1 + (j - 1) * shared.dim.aging_into_E.mult[1] + (k - 1) * shared.dim.aging_into_E.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_E[i - 1 + (j - 1) * shared.dim.aging_into_E.mult[1] + (k - 1) * shared.dim.aging_into_E.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0)))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_I.dim[2]; ++k) {
          internal.vaccinating_out_of_I[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_I.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]] = (1 == 1 ? 0 : (shared.n_vacc == 1 || j > shared.n_vacc - 2 || internal.aging_into_I[i - 1 + (j - 1) * shared.dim.aging_into_I.mult[1] + (k - 1) * shared.dim.aging_into_I.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_I[i - 1 + (j - 1) * shared.dim.aging_into_I.mult[1] + (k - 1) * shared.dim.aging_into_I.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0)))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_R.dim[2]; ++k) {
          internal.vaccinating_out_of_R[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_R.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]] = (1 == 1 ? 0 : (shared.n_vacc == 1 || j > shared.n_vacc - 2 || internal.aging_into_R[i - 1 + (j - 1) * shared.dim.aging_into_R.mult[1] + (k - 1) * shared.dim.aging_into_R.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_R[i - 1 + (j - 1) * shared.dim.aging_into_R.mult[1] + (k - 1) * shared.dim.aging_into_R.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0)))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_Is.dim[2]; ++k) {
          internal.vaccinating_out_of_Is[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Is.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]] = (1 == 1 ? 0 : (shared.n_vacc == 1 || j > shared.n_vacc - 2 || internal.aging_into_Is[i - 1 + (j - 1) * shared.dim.aging_into_Is.mult[1] + (k - 1) * shared.dim.aging_into_Is.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_Is[i - 1 + (j - 1) * shared.dim.aging_into_Is.mult[1] + (k - 1) * shared.dim.aging_into_Is.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0)))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_Rc.dim[2]; ++k) {
          internal.vaccinating_out_of_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]] = (1 == 1 ? 0 : (shared.n_vacc == 1 || j > shared.n_vacc - 2 || internal.aging_into_Rc[i - 1 + (j - 1) * shared.dim.aging_into_Rc.mult[1] + (k - 1) * shared.dim.aging_into_Rc.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_Rc[i - 1 + (j - 1) * shared.dim.aging_into_Rc.mult[1] + (k - 1) * shared.dim.aging_into_Rc.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0)))));
        }
      }
    }
    const real_type pos_neg_migration = (dust2::array::sum<real_type>(internal.migration.data(), shared.dim.migration) < 0 ? -1 : 1);
    for (size_t i = 1; i <= shared.dim.seeded_actual.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.seeded_actual.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.seeded_actual.dim[2]; ++k) {
          internal.seeded_actual[i - 1 + (j - 1) * shared.dim.seeded_actual.mult[1] + (k - 1) * shared.dim.seeded_actual.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] < internal.t_seeded[i - 1 + (j - 1) * shared.dim.t_seeded.mult[1] + (k - 1) * shared.dim.t_seeded.mult[2]] ? S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] : internal.t_seeded[i - 1 + (j - 1) * shared.dim.t_seeded.mult[1] + (k - 1) * shared.dim.t_seeded.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.background_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.background_death.dim[1]; ++j) {
        internal.background_death[i - 1 + (j - 1) * shared.dim.background_death.mult[1]] = (shared.simp_birth_death == 1 ? monty::math::max(monty::math::min(shared.crude_death[i - 1 + (j - 1) * shared.dim.crude_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0)) : monty::math::max(monty::math::min(internal.death_int[i - 1 + (j - 1) * shared.dim.death_int.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0)));
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_E.dim[2]; ++k) {
          internal.vaccinating_into_E[i - 1 + (j - 1) * shared.dim.vaccinating_into_E.mult[1] + (k - 1) * shared.dim.vaccinating_into_E.mult[2]] = (1 == 1 ? 0 : (j == 3 ? internal.vaccinating_out_of_E[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]] : (j >= 5 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_E[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_E.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]] + internal.vaccinating_out_of_E[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_E.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]] : 0)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_I.dim[2]; ++k) {
          internal.vaccinating_into_I[i - 1 + (j - 1) * shared.dim.vaccinating_into_I.mult[1] + (k - 1) * shared.dim.vaccinating_into_I.mult[2]] = (1 == 1 ? 0 : (j == 3 ? internal.vaccinating_out_of_I[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]] : (j >= 5 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_I[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_I.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]] + internal.vaccinating_out_of_I[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_I.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]] : 0)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_R.dim[2]; ++k) {
          internal.vaccinating_into_R[i - 1 + (j - 1) * shared.dim.vaccinating_into_R.mult[1] + (k - 1) * shared.dim.vaccinating_into_R.mult[2]] = (1 == 1 ? 0 : (j == 3 ? internal.vaccinating_out_of_R[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]] : (j >= 5 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_R[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_R.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]] + internal.vaccinating_out_of_R[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_R.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]] : 0)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_Is.dim[2]; ++k) {
          internal.vaccinating_into_Is[i - 1 + (j - 1) * shared.dim.vaccinating_into_Is.mult[1] + (k - 1) * shared.dim.vaccinating_into_Is.mult[2]] = (1 == 1 ? 0 : (j == 3 ? internal.vaccinating_out_of_Is[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]] : (j >= 5 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_Is[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_Is.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]] + internal.vaccinating_out_of_Is[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_Is.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]] : 0)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_Rc.dim[2]; ++k) {
          internal.vaccinating_into_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_into_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_into_Rc.mult[2]] = (1 == 1 ? 0 : (j == 3 ? internal.vaccinating_out_of_Rc[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]] : (j >= 5 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_Rc[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]] + internal.vaccinating_out_of_Rc[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]] : 0)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_adjusted.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_adjusted.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_adjusted.dim[2]; ++k) {
          internal.migration_adjusted[i - 1 + (j - 1) * shared.dim.migration_adjusted.mult[1] + (k - 1) * shared.dim.migration_adjusted.mult[2]] = internal.migration[i - 1 + (j - 1) * shared.dim.migration.mult[1] + (k - 1) * shared.dim.migration.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.infectious_period.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.infectious_period.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.infectious_period.dim[2]; ++k) {
          internal.infectious_period[i - 1 + (j - 1) * shared.dim.infectious_period.mult[1] + (k - 1) * shared.dim.infectious_period.mult[2]] = ((shared.severe_recovery_rate + shared.cfr_severe[i - 1] + internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]]) <= 0 || (shared.recovery_rate + shared.cfr_normal[i - 1] + internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]]) <= 0 ? 0 : (1 - shared.prop_severe[i - 1 + (j - 1) * shared.dim.prop_severe.mult[1] + (k - 1) * shared.dim.prop_severe.mult[2]]) / (shared.recovery_rate + shared.cfr_normal[i - 1] + internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]]) + shared.prop_severe[i - 1 + (j - 1) * shared.dim.prop_severe.mult[1] + (k - 1) * shared.dim.prop_severe.mult[2]] / (shared.severe_recovery_rate + shared.cfr_severe[i - 1] + internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]]));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Npop_background_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Npop_background_death.dim[1]; ++j) {
        internal.Npop_background_death[i - 1 + (j - 1) * shared.dim.Npop_background_death.mult[1]] = (internal.Npop_age_risk[i - 1 + (j - 1) * shared.dim.Npop_age_risk.mult[1]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.Npop_age_risk[i - 1 + (j - 1) * shared.dim.Npop_age_risk.mult[1]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (j - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0))));
      }
    }
    for (size_t i = 1; i <= shared.dim.E_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E_after_vaccination.dim[2]; ++k) {
          internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]] = internal.E_after_aging[i - 1 + (j - 1) * shared.dim.E_after_aging.mult[1] + (k - 1) * shared.dim.E_after_aging.mult[2]] + internal.vaccinating_into_E[i - 1 + (j - 1) * shared.dim.vaccinating_into_E.mult[1] + (k - 1) * shared.dim.vaccinating_into_E.mult[2]] - internal.vaccinating_out_of_E[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_E.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I_after_vaccination.dim[2]; ++k) {
          internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]] = internal.I_after_aging[i - 1 + (j - 1) * shared.dim.I_after_aging.mult[1] + (k - 1) * shared.dim.I_after_aging.mult[2]] + internal.vaccinating_into_I[i - 1 + (j - 1) * shared.dim.vaccinating_into_I.mult[1] + (k - 1) * shared.dim.vaccinating_into_I.mult[2]] - internal.vaccinating_out_of_I[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_I.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R_after_vaccination.dim[2]; ++k) {
          internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]] = internal.R_after_aging[i - 1 + (j - 1) * shared.dim.R_after_aging.mult[1] + (k - 1) * shared.dim.R_after_aging.mult[2]] + internal.vaccinating_into_R[i - 1 + (j - 1) * shared.dim.vaccinating_into_R.mult[1] + (k - 1) * shared.dim.vaccinating_into_R.mult[2]] - internal.vaccinating_out_of_R[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_R.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is_after_vaccination.dim[2]; ++k) {
          internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]] = internal.Is_after_aging[i - 1 + (j - 1) * shared.dim.Is_after_aging.mult[1] + (k - 1) * shared.dim.Is_after_aging.mult[2]] + internal.vaccinating_into_Is[i - 1 + (j - 1) * shared.dim.vaccinating_into_Is.mult[1] + (k - 1) * shared.dim.vaccinating_into_Is.mult[2]] - internal.vaccinating_out_of_Is[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Is.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc_after_vaccination.dim[2]; ++k) {
          internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]] = internal.Rc_after_aging[i - 1 + (j - 1) * shared.dim.Rc_after_aging.mult[1] + (k - 1) * shared.dim.Rc_after_aging.mult[2]] + internal.vaccinating_into_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_into_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_into_Rc.mult[2]] - internal.vaccinating_out_of_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_S.dim[2]; ++k) {
          internal.migration_occuring_S[i - 1 + (j - 1) * shared.dim.migration_occuring_S.mult[1] + (k - 1) * shared.dim.migration_occuring_S.mult[2]] = (internal.migration_distribution[0] <= 0 || dust2::array::sum<real_type>(S, shared.dim.S) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] / dust2::array::sum<real_type>(S, shared.dim.S) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {0, 0}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_E.dim[2]; ++k) {
          internal.migration_occuring_E[i - 1 + (j - 1) * shared.dim.migration_occuring_E.mult[1] + (k - 1) * shared.dim.migration_occuring_E.mult[2]] = (internal.migration_distribution[1] <= 0 || dust2::array::sum<real_type>(E, shared.dim.E) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), E[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]] / dust2::array::sum<real_type>(E, shared.dim.E) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {1, 1}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_I.dim[2]; ++k) {
          internal.migration_occuring_I[i - 1 + (j - 1) * shared.dim.migration_occuring_I.mult[1] + (k - 1) * shared.dim.migration_occuring_I.mult[2]] = (internal.migration_distribution[2] <= 0 || dust2::array::sum<real_type>(I, shared.dim.I) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), I[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]] / dust2::array::sum<real_type>(I, shared.dim.I) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {2, 2}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_R.dim[2]; ++k) {
          internal.migration_occuring_R[i - 1 + (j - 1) * shared.dim.migration_occuring_R.mult[1] + (k - 1) * shared.dim.migration_occuring_R.mult[2]] = (internal.migration_distribution[3] <= 0 || dust2::array::sum<real_type>(R, shared.dim.R) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), R[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]] / dust2::array::sum<real_type>(R, shared.dim.R) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {3, 3}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_Is.dim[2]; ++k) {
          internal.migration_occuring_Is[i - 1 + (j - 1) * shared.dim.migration_occuring_Is.mult[1] + (k - 1) * shared.dim.migration_occuring_Is.mult[2]] = (internal.migration_distribution[4] <= 0 || dust2::array::sum<real_type>(Is, shared.dim.Is) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), Is[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]] / dust2::array::sum<real_type>(Is, shared.dim.Is) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {4, 4}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_occuring_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_occuring_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_occuring_Rc.dim[2]; ++k) {
          internal.migration_occuring_Rc[i - 1 + (j - 1) * shared.dim.migration_occuring_Rc.mult[1] + (k - 1) * shared.dim.migration_occuring_Rc.mult[2]] = (internal.migration_distribution[5] <= 0 || dust2::array::sum<real_type>(Rc, shared.dim.Rc) <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.migration_adjusted.data(), shared.dim.migration_adjusted), Rc[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]] / dust2::array::sum<real_type>(Rc, shared.dim.Rc) * dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution, {5, 5}) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution)));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.beta.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.beta.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.beta.dim[2]; ++k) {
          internal.beta[i - 1 + (j - 1) * shared.dim.beta.mult[1] + (k - 1) * shared.dim.beta.mult[2]] = (internal.infectious_period[i - 1 + (j - 1) * shared.dim.infectious_period.mult[1] + (k - 1) * shared.dim.infectious_period.mult[2]] <= 0 ? 0 : t_R0 / internal.infectious_period[i - 1 + (j - 1) * shared.dim.infectious_period.mult[1] + (k - 1) * shared.dim.infectious_period.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.birth_rate.size; ++i) {
      internal.birth_rate[i - 1] = (internal.reproductive_population[i - 1] <= 0 ? 0 : dust2::array::sum<real_type>(internal.Npop_background_death.data(), shared.dim.Npop_background_death, {i - 1, i - 1}, {0, shared.dim.Npop_background_death.dim[1] - 1}) / internal.reproductive_population[i - 1]);
    }
    for (size_t i = 1; i <= shared.dim.waning_from_E_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_E_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_E_short.dim[2]; ++k) {
          internal.waning_from_E_short[i - 1 + (j - 1) * shared.dim.waning_from_E_short.mult[1] + (k - 1) * shared.dim.waning_from_E_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_E_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_E_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_E_long.dim[2]; ++k) {
          internal.waning_from_E_long[i - 1 + (j - 1) * shared.dim.waning_from_E_long.mult[1] + (k - 1) * shared.dim.waning_from_E_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_I_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_I_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_I_short.dim[2]; ++k) {
          internal.waning_from_I_short[i - 1 + (j - 1) * shared.dim.waning_from_I_short.mult[1] + (k - 1) * shared.dim.waning_from_I_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_I_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_I_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_I_long.dim[2]; ++k) {
          internal.waning_from_I_long[i - 1 + (j - 1) * shared.dim.waning_from_I_long.mult[1] + (k - 1) * shared.dim.waning_from_I_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_R_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_R_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_R_short.dim[2]; ++k) {
          internal.waning_from_R_short[i - 1 + (j - 1) * shared.dim.waning_from_R_short.mult[1] + (k - 1) * shared.dim.waning_from_R_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_R_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_R_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_R_long.dim[2]; ++k) {
          internal.waning_from_R_long[i - 1 + (j - 1) * shared.dim.waning_from_R_long.mult[1] + (k - 1) * shared.dim.waning_from_R_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_Is_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_Is_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_Is_short.dim[2]; ++k) {
          internal.waning_from_Is_short[i - 1 + (j - 1) * shared.dim.waning_from_Is_short.mult[1] + (k - 1) * shared.dim.waning_from_Is_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_Is_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_Is_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_Is_long.dim[2]; ++k) {
          internal.waning_from_Is_long[i - 1 + (j - 1) * shared.dim.waning_from_Is_long.mult[1] + (k - 1) * shared.dim.waning_from_Is_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_Rc_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_Rc_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_Rc_short.dim[2]; ++k) {
          internal.waning_from_Rc_short[i - 1 + (j - 1) * shared.dim.waning_from_Rc_short.mult[1] + (k - 1) * shared.dim.waning_from_Rc_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_Rc_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_Rc_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_Rc_long.dim[2]; ++k) {
          internal.waning_from_Rc_long[i - 1 + (j - 1) * shared.dim.waning_from_Rc_long.mult[1] + (k - 1) * shared.dim.waning_from_Rc_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_S.dim[2]; ++k) {
          internal.migration_S[i - 1 + (j - 1) * shared.dim.migration_S.mult[1] + (k - 1) * shared.dim.migration_S.mult[2]] = (internal.migration_distribution[0] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_S[i - 1 + (j - 1) * shared.dim.migration_occuring_S.mult[1] + (k - 1) * shared.dim.migration_occuring_S.mult[2]], internal.migration_distribution[0]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_E.dim[2]; ++k) {
          internal.migration_E[i - 1 + (j - 1) * shared.dim.migration_E.mult[1] + (k - 1) * shared.dim.migration_E.mult[2]] = (internal.migration_distribution[1] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_E[i - 1 + (j - 1) * shared.dim.migration_occuring_E.mult[1] + (k - 1) * shared.dim.migration_occuring_E.mult[2]], internal.migration_distribution[1]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_I.dim[2]; ++k) {
          internal.migration_I[i - 1 + (j - 1) * shared.dim.migration_I.mult[1] + (k - 1) * shared.dim.migration_I.mult[2]] = (internal.migration_distribution[2] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_I[i - 1 + (j - 1) * shared.dim.migration_occuring_I.mult[1] + (k - 1) * shared.dim.migration_occuring_I.mult[2]], internal.migration_distribution[2]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_R.dim[2]; ++k) {
          internal.migration_R[i - 1 + (j - 1) * shared.dim.migration_R.mult[1] + (k - 1) * shared.dim.migration_R.mult[2]] = (internal.migration_distribution[3] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_R[i - 1 + (j - 1) * shared.dim.migration_occuring_R.mult[1] + (k - 1) * shared.dim.migration_occuring_R.mult[2]], internal.migration_distribution[3]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_Is.dim[2]; ++k) {
          internal.migration_Is[i - 1 + (j - 1) * shared.dim.migration_Is.mult[1] + (k - 1) * shared.dim.migration_Is.mult[2]] = (internal.migration_distribution[4] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_Is[i - 1 + (j - 1) * shared.dim.migration_occuring_Is.mult[1] + (k - 1) * shared.dim.migration_occuring_Is.mult[2]], internal.migration_distribution[4]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.migration_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.migration_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.migration_Rc.dim[2]; ++k) {
          internal.migration_Rc[i - 1 + (j - 1) * shared.dim.migration_Rc.mult[1] + (k - 1) * shared.dim.migration_Rc.mult[2]] = (internal.migration_distribution[5] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.migration_occuring_Rc[i - 1 + (j - 1) * shared.dim.migration_occuring_Rc.mult[1] + (k - 1) * shared.dim.migration_occuring_Rc.mult[2]], internal.migration_distribution[5]) / dust2::array::sum<real_type>(internal.migration_distribution.data(), shared.dim.migration_distribution));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.beta_updated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.beta_updated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.beta_updated.dim[2]; ++k) {
          internal.beta_updated[i - 1 + (j - 1) * shared.dim.beta_updated.mult[1] + (k - 1) * shared.dim.beta_updated.mult[2]] = (i <= shared.age_maternal_protection_ends ? internal.beta[i - 1 + (j - 1) * shared.dim.beta.mult[1] + (k - 1) * shared.dim.beta.mult[2]] * (1 - shared.age_vaccination_beta_modifier[i - 1 + (j - 1) * shared.dim.age_vaccination_beta_modifier.mult[1] + (k - 1) * shared.dim.age_vaccination_beta_modifier.mult[2]]) * (1 - (shared.protection_weight_vacc * internal.prop_maternal_vaccinated[k - 1] + shared.protection_weight_rec * internal.prop_maternal_natural[k - 1])) : (1 - shared.age_vaccination_beta_modifier[i - 1 + (j - 1) * shared.dim.age_vaccination_beta_modifier.mult[1] + (k - 1) * shared.dim.age_vaccination_beta_modifier.mult[2]]) * internal.beta[i - 1 + (j - 1) * shared.dim.beta.mult[1] + (k - 1) * shared.dim.beta.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Births.size; ++i) {
      internal.Births[i - 1] = (internal.reproductive_population[i - 1] <= 0 ? 0 : (shared.simp_birth_death == 1 ? monty::random::binomial<real_type>(rng_state, internal.reproductive_population[i - 1], monty::math::max(monty::math::min(internal.birth_rate[i - 1] / 2, static_cast<real_type>(1)), static_cast<real_type>(0))) : monty::random::binomial<real_type>(rng_state, internal.reproductive_population[i - 1], monty::math::max(monty::math::min(internal.birth_int[i - 1] / 2, static_cast<real_type>(1)), static_cast<real_type>(0)))));
    }
    for (size_t k = 1; k <= shared.dim.aging_into_S.dim[2]; ++k) {
      internal.aging_into_S[(k - 1) * shared.dim.aging_into_S.mult[2]] = dust2::array::sum<real_type>(internal.Births.data(), shared.dim.Births);
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_age); ++i) {
      for (size_t j = 1; j <= shared.dim.aging_into_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.aging_into_S.dim[2]; ++k) {
          internal.aging_into_S[i - 1 + (j - 1) * shared.dim.aging_into_S.mult[1] + (k - 1) * shared.dim.aging_into_S.mult[2]] = (S[i - 1 - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, S[i - 1 - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]], monty::math::max(monty::math::min(shared.aging_rate[i - 1 - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_E_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_E_long.dim[2]; ++k) {
          internal.waning_to_E_long[i - 1 + (j - 1) * shared.dim.waning_to_E_long.mult[1] + (k - 1) * shared.dim.waning_to_E_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_E_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_E_short.mult[1] + (k - 1) * shared.dim.waning_from_E_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_E_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_E_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_E_unvaccinated.dim[2]; ++k) {
          internal.waning_to_E_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_E_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_E_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_E_long.data(), shared.dim.waning_from_E_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_I_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_I_long.dim[2]; ++k) {
          internal.waning_to_I_long[i - 1 + (j - 1) * shared.dim.waning_to_I_long.mult[1] + (k - 1) * shared.dim.waning_to_I_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_I_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_I_short.mult[1] + (k - 1) * shared.dim.waning_from_I_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_I_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_I_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_I_unvaccinated.dim[2]; ++k) {
          internal.waning_to_I_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_I_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_I_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_I_long.data(), shared.dim.waning_from_I_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_R_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_R_long.dim[2]; ++k) {
          internal.waning_to_R_long[i - 1 + (j - 1) * shared.dim.waning_to_R_long.mult[1] + (k - 1) * shared.dim.waning_to_R_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_R_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_R_short.mult[1] + (k - 1) * shared.dim.waning_from_R_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_R_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_R_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_R_unvaccinated.dim[2]; ++k) {
          internal.waning_to_R_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_R_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_R_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_R_long.data(), shared.dim.waning_from_R_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_Is_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_Is_long.dim[2]; ++k) {
          internal.waning_to_Is_long[i - 1 + (j - 1) * shared.dim.waning_to_Is_long.mult[1] + (k - 1) * shared.dim.waning_to_Is_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_Is_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_Is_short.mult[1] + (k - 1) * shared.dim.waning_from_Is_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_Is_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_Is_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_Is_unvaccinated.dim[2]; ++k) {
          internal.waning_to_Is_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Is_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Is_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_Is_long.data(), shared.dim.waning_from_Is_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_Rc_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_Rc_long.dim[2]; ++k) {
          internal.waning_to_Rc_long[i - 1 + (j - 1) * shared.dim.waning_to_Rc_long.mult[1] + (k - 1) * shared.dim.waning_to_Rc_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_Rc_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_Rc_short.mult[1] + (k - 1) * shared.dim.waning_from_Rc_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_Rc_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_Rc_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_Rc_unvaccinated.dim[2]; ++k) {
          internal.waning_to_Rc_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_Rc_long.data(), shared.dim.waning_from_Rc_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.S_after_aging.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_after_aging.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_after_aging.dim[2]; ++k) {
          internal.S_after_aging[i - 1 + (j - 1) * shared.dim.S_after_aging.mult[1] + (k - 1) * shared.dim.S_after_aging.mult[2]] = S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] + internal.aging_into_S[i - 1 + (j - 1) * shared.dim.aging_into_S.mult[1] + (k - 1) * shared.dim.aging_into_S.mult[2]] - internal.aging_out_of_S[i - 1 + (j - 1) * shared.dim.aging_out_of_S.mult[1] + (k - 1) * shared.dim.aging_out_of_S.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_out_of_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_out_of_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_out_of_S.dim[2]; ++k) {
          internal.vaccinating_out_of_S[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_S.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]] = (shared.n_vacc == 1 || j >= shared.n_vacc - 1 || internal.aging_into_S[i - 1 + (j - 1) * shared.dim.aging_into_S.mult[1] + (k - 1) * shared.dim.aging_into_S.mult[2]] <= 0 || internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.aging_into_S[i - 1 + (j - 1) * shared.dim.aging_into_S.mult[1] + (k - 1) * shared.dim.aging_into_S.mult[2]], monty::math::max(monty::math::min(internal.vaccination_prop[i - 1 + (j - 1) * shared.dim.vaccination_prop.mult[1] + (k - 1) * shared.dim.vaccination_prop.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.E_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E_after_waning.dim[2]; ++k) {
          internal.E_after_waning[i - 1 + (j - 1) * shared.dim.E_after_waning.mult[1] + (k - 1) * shared.dim.E_after_waning.mult[2]] = internal.E_after_vaccination[i - 1 + (j - 1) * shared.dim.E_after_vaccination.mult[1] + (k - 1) * shared.dim.E_after_vaccination.mult[2]] + internal.waning_to_E_long[i - 1 + (j - 1) * shared.dim.waning_to_E_long.mult[1] + (k - 1) * shared.dim.waning_to_E_long.mult[2]] + internal.waning_to_E_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_E_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_E_unvaccinated.mult[2]] - internal.waning_from_E_short[i - 1 + (j - 1) * shared.dim.waning_from_E_short.mult[1] + (k - 1) * shared.dim.waning_from_E_short.mult[2]] - internal.waning_from_E_long[i - 1 + (j - 1) * shared.dim.waning_from_E_long.mult[1] + (k - 1) * shared.dim.waning_from_E_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I_after_waning.dim[2]; ++k) {
          internal.I_after_waning[i - 1 + (j - 1) * shared.dim.I_after_waning.mult[1] + (k - 1) * shared.dim.I_after_waning.mult[2]] = internal.I_after_vaccination[i - 1 + (j - 1) * shared.dim.I_after_vaccination.mult[1] + (k - 1) * shared.dim.I_after_vaccination.mult[2]] + internal.waning_to_I_long[i - 1 + (j - 1) * shared.dim.waning_to_I_long.mult[1] + (k - 1) * shared.dim.waning_to_I_long.mult[2]] + internal.waning_to_I_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_I_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_I_unvaccinated.mult[2]] - internal.waning_from_I_short[i - 1 + (j - 1) * shared.dim.waning_from_I_short.mult[1] + (k - 1) * shared.dim.waning_from_I_short.mult[2]] - internal.waning_from_I_long[i - 1 + (j - 1) * shared.dim.waning_from_I_long.mult[1] + (k - 1) * shared.dim.waning_from_I_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R_after_waning.dim[2]; ++k) {
          internal.R_after_waning[i - 1 + (j - 1) * shared.dim.R_after_waning.mult[1] + (k - 1) * shared.dim.R_after_waning.mult[2]] = internal.R_after_vaccination[i - 1 + (j - 1) * shared.dim.R_after_vaccination.mult[1] + (k - 1) * shared.dim.R_after_vaccination.mult[2]] + internal.waning_to_R_long[i - 1 + (j - 1) * shared.dim.waning_to_R_long.mult[1] + (k - 1) * shared.dim.waning_to_R_long.mult[2]] + internal.waning_to_R_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_R_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_R_unvaccinated.mult[2]] - internal.waning_from_R_short[i - 1 + (j - 1) * shared.dim.waning_from_R_short.mult[1] + (k - 1) * shared.dim.waning_from_R_short.mult[2]] - internal.waning_from_R_long[i - 1 + (j - 1) * shared.dim.waning_from_R_long.mult[1] + (k - 1) * shared.dim.waning_from_R_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is_after_waning.dim[2]; ++k) {
          internal.Is_after_waning[i - 1 + (j - 1) * shared.dim.Is_after_waning.mult[1] + (k - 1) * shared.dim.Is_after_waning.mult[2]] = internal.Is_after_vaccination[i - 1 + (j - 1) * shared.dim.Is_after_vaccination.mult[1] + (k - 1) * shared.dim.Is_after_vaccination.mult[2]] + internal.waning_to_Is_long[i - 1 + (j - 1) * shared.dim.waning_to_Is_long.mult[1] + (k - 1) * shared.dim.waning_to_Is_long.mult[2]] + internal.waning_to_Is_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Is_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Is_unvaccinated.mult[2]] - internal.waning_from_Is_short[i - 1 + (j - 1) * shared.dim.waning_from_Is_short.mult[1] + (k - 1) * shared.dim.waning_from_Is_short.mult[2]] - internal.waning_from_Is_long[i - 1 + (j - 1) * shared.dim.waning_from_Is_long.mult[1] + (k - 1) * shared.dim.waning_from_Is_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc_after_waning.dim[2]; ++k) {
          internal.Rc_after_waning[i - 1 + (j - 1) * shared.dim.Rc_after_waning.mult[1] + (k - 1) * shared.dim.Rc_after_waning.mult[2]] = internal.Rc_after_vaccination[i - 1 + (j - 1) * shared.dim.Rc_after_vaccination.mult[1] + (k - 1) * shared.dim.Rc_after_vaccination.mult[2]] + internal.waning_to_Rc_long[i - 1 + (j - 1) * shared.dim.waning_to_Rc_long.mult[1] + (k - 1) * shared.dim.waning_to_Rc_long.mult[2]] + internal.waning_to_Rc_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[2]] - internal.waning_from_Rc_short[i - 1 + (j - 1) * shared.dim.waning_from_Rc_short.mult[1] + (k - 1) * shared.dim.waning_from_Rc_short.mult[2]] - internal.waning_from_Rc_long[i - 1 + (j - 1) * shared.dim.waning_from_Rc_long.mult[1] + (k - 1) * shared.dim.waning_from_Rc_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.E_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E_available.dim[2]; ++k) {
          internal.E_available[i - 1 + (j - 1) * shared.dim.E_available.mult[1] + (k - 1) * shared.dim.E_available.mult[2]] = internal.E_after_waning[i - 1 + (j - 1) * shared.dim.E_after_waning.mult[1] + (k - 1) * shared.dim.E_after_waning.mult[2]] + internal.migration_E[i - 1 + (j - 1) * shared.dim.migration_E.mult[1] + (k - 1) * shared.dim.migration_E.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I_available.dim[2]; ++k) {
          internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]] = internal.I_after_waning[i - 1 + (j - 1) * shared.dim.I_after_waning.mult[1] + (k - 1) * shared.dim.I_after_waning.mult[2]] + internal.migration_I[i - 1 + (j - 1) * shared.dim.migration_I.mult[1] + (k - 1) * shared.dim.migration_I.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R_available.dim[2]; ++k) {
          internal.R_available[i - 1 + (j - 1) * shared.dim.R_available.mult[1] + (k - 1) * shared.dim.R_available.mult[2]] = internal.R_after_waning[i - 1 + (j - 1) * shared.dim.R_after_waning.mult[1] + (k - 1) * shared.dim.R_after_waning.mult[2]] + internal.migration_R[i - 1 + (j - 1) * shared.dim.migration_R.mult[1] + (k - 1) * shared.dim.migration_R.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc_available.dim[2]; ++k) {
          internal.Rc_available[i - 1 + (j - 1) * shared.dim.Rc_available.mult[1] + (k - 1) * shared.dim.Rc_available.mult[2]] = internal.Rc_after_waning[i - 1 + (j - 1) * shared.dim.Rc_after_waning.mult[1] + (k - 1) * shared.dim.Rc_after_waning.mult[2]] + internal.migration_Rc[i - 1 + (j - 1) * shared.dim.migration_Rc.mult[1] + (k - 1) * shared.dim.migration_Rc.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is_available.dim[2]; ++k) {
          internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]] = internal.Is_after_waning[i - 1 + (j - 1) * shared.dim.Is_after_waning.mult[1] + (k - 1) * shared.dim.Is_after_waning.mult[2]] + internal.migration_Is[i - 1 + (j - 1) * shared.dim.migration_Is.mult[1] + (k - 1) * shared.dim.migration_Is.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.vaccinating_into_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.vaccinating_into_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.vaccinating_into_S.dim[2]; ++k) {
          internal.vaccinating_into_S[i - 1 + (j - 1) * shared.dim.vaccinating_into_S.mult[1] + (k - 1) * shared.dim.vaccinating_into_S.mult[2]] = (j == 3 ? internal.vaccinating_out_of_S[i - 1 + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]] : (j > 3 && std::fmod(j, 2) == 1 ? internal.vaccinating_out_of_S[i - 1 + (j - 2 - 1) * shared.dim.vaccinating_out_of_S.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]] + internal.vaccinating_out_of_S[i - 1 + (j - 3 - 1) * shared.dim.vaccinating_out_of_S.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]] : 0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.incubated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.incubated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.incubated.dim[2]; ++k) {
          internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] = (internal.E_available[i - 1 + (j - 1) * shared.dim.E_available.mult[1] + (k - 1) * shared.dim.E_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.E_available[i - 1 + (j - 1) * shared.dim.E_available.mult[1] + (k - 1) * shared.dim.E_available.mult[2]], monty::math::max(monty::math::min(shared.incubation_rate, static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.recovered_I_to_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.recovered_I_to_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.recovered_I_to_R.dim[2]; ++k) {
          internal.recovered_I_to_R[i - 1 + (j - 1) * shared.dim.recovered_I_to_R.mult[1] + (k - 1) * shared.dim.recovered_I_to_R.mult[2]] = (internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]], monty::math::max(monty::math::min(shared.recovery_rate, static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.recovered_from_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.recovered_from_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.recovered_from_Is.dim[2]; ++k) {
          internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]] = (internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]], monty::math::max(monty::math::min(shared.severe_recovery_rate, static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.E_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E_death.dim[2]; ++k) {
          internal.E_death[i - 1 + (j - 1) * shared.dim.E_death.mult[1] + (k - 1) * shared.dim.E_death.mult[2]] = (internal.E_available[i - 1 + (j - 1) * shared.dim.E_available.mult[1] + (k - 1) * shared.dim.E_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.E_available[i - 1 + (j - 1) * shared.dim.E_available.mult[1] + (k - 1) * shared.dim.E_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I_death.dim[2]; ++k) {
          internal.I_death[i - 1 + (j - 1) * shared.dim.I_death.mult[1] + (k - 1) * shared.dim.I_death.mult[2]] = (internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0)) + monty::math::max(shared.cfr_normal[i - 1], static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R_death.dim[2]; ++k) {
          internal.R_death[i - 1 + (j - 1) * shared.dim.R_death.mult[1] + (k - 1) * shared.dim.R_death.mult[2]] = (internal.R_available[i - 1 + (j - 1) * shared.dim.R_available.mult[1] + (k - 1) * shared.dim.R_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.R_available[i - 1 + (j - 1) * shared.dim.R_available.mult[1] + (k - 1) * shared.dim.R_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is_death.dim[2]; ++k) {
          internal.Is_death[i - 1 + (j - 1) * shared.dim.Is_death.mult[1] + (k - 1) * shared.dim.Is_death.mult[2]] = (internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0)) + monty::math::max(shared.cfr_severe[i - 1], static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc_death.dim[2]; ++k) {
          internal.Rc_death[i - 1 + (j - 1) * shared.dim.Rc_death.mult[1] + (k - 1) * shared.dim.Rc_death.mult[2]] = (internal.Rc_available[i - 1 + (j - 1) * shared.dim.Rc_available.mult[1] + (k - 1) * shared.dim.Rc_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.Rc_available[i - 1 + (j - 1) * shared.dim.Rc_available.mult[1] + (k - 1) * shared.dim.Rc_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.S_after_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_after_vaccination.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_after_vaccination.dim[2]; ++k) {
          internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]] = internal.S_after_aging[i - 1 + (j - 1) * shared.dim.S_after_aging.mult[1] + (k - 1) * shared.dim.S_after_aging.mult[2]] + internal.vaccinating_into_S[i - 1 + (j - 1) * shared.dim.vaccinating_into_S.mult[1] + (k - 1) * shared.dim.vaccinating_into_S.mult[2]] - internal.vaccinating_out_of_S[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_S.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.inf_weighted.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.inf_weighted.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.inf_weighted.dim[2]; ++k) {
          internal.inf_weighted[i - 1 + (j - 1) * shared.dim.inf_weighted.mult[1] + (k - 1) * shared.dim.inf_weighted.mult[2]] = internal.beta_updated[i - 1 + (j - 1) * shared.dim.beta_updated.mult[1] + (k - 1) * shared.dim.beta_updated.mult[2]] * (internal.I_available[i - 1 + (j - 1) * shared.dim.I_available.mult[1] + (k - 1) * shared.dim.I_available.mult[2]] + internal.Is_available[i - 1 + (j - 1) * shared.dim.Is_available.mult[1] + (k - 1) * shared.dim.Is_available.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.into_I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.into_I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.into_I.dim[2]; ++k) {
          internal.into_I[i - 1 + (j - 1) * shared.dim.into_I.mult[1] + (k - 1) * shared.dim.into_I.mult[2]] = (internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]], monty::math::max(monty::math::min(1 - shared.prop_severe[i - 1 + (j - 1) * shared.dim.prop_severe.mult[1] + (k - 1) * shared.dim.prop_severe.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.recovered_Is_to_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.recovered_Is_to_R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.recovered_Is_to_R.dim[2]; ++k) {
          internal.recovered_Is_to_R[i - 1 + (j - 1) * shared.dim.recovered_Is_to_R.mult[1] + (k - 1) * shared.dim.recovered_Is_to_R.mult[2]] = (internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]], monty::math::max(monty::math::min(1 - shared.prop_complications[i - 1], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_S_short.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_S_short.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_S_short.dim[2]; ++k) {
          internal.waning_from_S_short[i - 1 + (j - 1) * shared.dim.waning_from_S_short.mult[1] + (k - 1) * shared.dim.waning_from_S_short.mult[2]] = (std::fmod(j, 2) == 1 && j > 1 && internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.short_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_from_S_long.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_from_S_long.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_from_S_long.dim[2]; ++k) {
          internal.waning_from_S_long[i - 1 + (j - 1) * shared.dim.waning_from_S_long.mult[1] + (k - 1) * shared.dim.waning_from_S_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 && internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]] > 0 ? monty::random::binomial<real_type>(rng_state, internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]], monty::math::max(monty::math::min(shared.long_term_waning[j - 1], static_cast<real_type>(1)), static_cast<real_type>(0))) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.infectious_source.size; ++i) {
      internal.infectious_source[i - 1] = dust2::array::sum<real_type>(internal.inf_weighted.data(), shared.dim.inf_weighted, {i - 1, i - 1}, {0, shared.dim.inf_weighted.dim[1] - 1}, {0, shared.dim.inf_weighted.dim[2] - 1});
    }
    for (size_t i = 1; i <= shared.dim.into_Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.into_Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.into_Is.dim[2]; ++k) {
          internal.into_Is[i - 1 + (j - 1) * shared.dim.into_Is.mult[1] + (k - 1) * shared.dim.into_Is.mult[2]] = (internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] - internal.into_I[i - 1 + (j - 1) * shared.dim.into_I.mult[1] + (k - 1) * shared.dim.into_I.mult[2]] <= 0 ? 0 : internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] - internal.into_I[i - 1 + (j - 1) * shared.dim.into_I.mult[1] + (k - 1) * shared.dim.into_I.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.recovered_Is_to_Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.recovered_Is_to_Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.recovered_Is_to_Rc.dim[2]; ++k) {
          internal.recovered_Is_to_Rc[i - 1 + (j - 1) * shared.dim.recovered_Is_to_Rc.mult[1] + (k - 1) * shared.dim.recovered_Is_to_Rc.mult[2]] = (internal.recovered_Is_to_R[i - 1 + (j - 1) * shared.dim.recovered_Is_to_R.mult[1] + (k - 1) * shared.dim.recovered_Is_to_R.mult[2]] - internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]] <= 0 ? 0 : internal.recovered_Is_to_R[i - 1 + (j - 1) * shared.dim.recovered_Is_to_R.mult[1] + (k - 1) * shared.dim.recovered_Is_to_R.mult[2]] - internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_S_long.dim[0]; ++i) {
      for (size_t j = 1; j <= static_cast<size_t>((shared.n_vacc - 1)); ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_S_long.dim[2]; ++k) {
          internal.waning_to_S_long[i - 1 + (j - 1) * shared.dim.waning_to_S_long.mult[1] + (k - 1) * shared.dim.waning_to_S_long.mult[2]] = (std::fmod(j, 2) == 0 && j > 1 ? internal.waning_from_S_short[i - 1 + (j + 1 - 1) * shared.dim.waning_from_S_short.mult[1] + (k - 1) * shared.dim.waning_from_S_short.mult[2]] : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.waning_to_S_unvaccinated.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.waning_to_S_unvaccinated.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.waning_to_S_unvaccinated.dim[2]; ++k) {
          internal.waning_to_S_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_S_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_S_unvaccinated.mult[2]] = (j == 1 ? dust2::array::sum<real_type>(internal.waning_from_S_long.data(), shared.dim.waning_from_S_long, {i - 1, i - 1}, {1, shared.n_vacc - 1}, {k - 1, k - 1}) : 0);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.lambda_contact.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_contact.dim[1]; ++j) {
        internal.lambda_contact[i - 1 + (j - 1) * shared.dim.lambda_contact.mult[1]] = shared.contact_matrix[i - 1 + (j - 1) * shared.dim.contact_matrix.mult[1]] * internal.infectious_source[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.S_after_waning.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_after_waning.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_after_waning.dim[2]; ++k) {
          internal.S_after_waning[i - 1 + (j - 1) * shared.dim.S_after_waning.mult[1] + (k - 1) * shared.dim.S_after_waning.mult[2]] = internal.S_after_vaccination[i - 1 + (j - 1) * shared.dim.S_after_vaccination.mult[1] + (k - 1) * shared.dim.S_after_vaccination.mult[2]] + internal.waning_to_S_long[i - 1 + (j - 1) * shared.dim.waning_to_S_long.mult[1] + (k - 1) * shared.dim.waning_to_S_long.mult[2]] + internal.waning_to_S_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_S_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_S_unvaccinated.mult[2]] - internal.waning_from_S_short[i - 1 + (j - 1) * shared.dim.waning_from_S_short.mult[1] + (k - 1) * shared.dim.waning_from_S_short.mult[2]] - internal.waning_from_S_long[i - 1 + (j - 1) * shared.dim.waning_from_S_long.mult[1] + (k - 1) * shared.dim.waning_from_S_long.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.S_available.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_available.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_available.dim[2]; ++k) {
          internal.S_available[i - 1 + (j - 1) * shared.dim.S_available.mult[1] + (k - 1) * shared.dim.S_available.mult[2]] = internal.S_after_waning[i - 1 + (j - 1) * shared.dim.S_after_waning.mult[1] + (k - 1) * shared.dim.S_after_waning.mult[2]] + internal.migration_occuring_S[i - 1 + (j - 1) * shared.dim.migration_occuring_S.mult[1] + (k - 1) * shared.dim.migration_occuring_S.mult[2]] * pos_neg_migration;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.S_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_death.dim[2]; ++k) {
          internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] = (internal.S_available[i - 1 + (j - 1) * shared.dim.S_available.mult[1] + (k - 1) * shared.dim.S_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.S_available[i - 1 + (j - 1) * shared.dim.S_available.mult[1] + (k - 1) * shared.dim.S_available.mult[2]], monty::math::max(monty::math::min(internal.background_death[i - 1 + (k - 1) * shared.dim.background_death.mult[1]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ngm_unfolded.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ngm_unfolded.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ngm_unfolded.dim[2]; ++k) {
          for (size_t l = 1; l <= shared.dim.ngm_unfolded.dim[3]; ++l) {
            internal.ngm_unfolded[i - 1 + (j - 1) * shared.dim.ngm_unfolded.mult[1] + (k - 1) * shared.dim.ngm_unfolded.mult[2] + (l - 1) * shared.dim.ngm_unfolded.mult[3]] = internal.S_available[i - 1 + (k - 1) * shared.dim.S_available.mult[1] + (l - 1) * shared.dim.S_available.mult[2]] * internal.beta_updated[i - 1 + (k - 1) * shared.dim.beta_updated.mult[1] + (l - 1) * shared.dim.beta_updated.mult[2]] * internal.infectious_period[i - 1 + (k - 1) * shared.dim.infectious_period.mult[1] + (l - 1) * shared.dim.infectious_period.mult[2]] * shared.contact_matrix[i - 1 + (j - 1) * shared.dim.contact_matrix.mult[1]];
          }
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Npop_age.size; ++i) {
      internal.Npop_age[i - 1] = dust2::array::sum<real_type>(internal.S_available.data(), shared.dim.S_available, {i - 1, i - 1}, {0, shared.dim.S_available.dim[1] - 1}, {0, shared.dim.S_available.dim[2] - 1}) + dust2::array::sum<real_type>(internal.E_available.data(), shared.dim.E_available, {i - 1, i - 1}, {0, shared.dim.E_available.dim[1] - 1}, {0, shared.dim.E_available.dim[2] - 1}) + dust2::array::sum<real_type>(internal.I_available.data(), shared.dim.I_available, {i - 1, i - 1}, {0, shared.dim.I_available.dim[1] - 1}, {0, shared.dim.I_available.dim[2] - 1}) + dust2::array::sum<real_type>(internal.R_available.data(), shared.dim.R_available, {i - 1, i - 1}, {0, shared.dim.R_available.dim[1] - 1}, {0, shared.dim.R_available.dim[2] - 1}) + dust2::array::sum<real_type>(internal.Is_available.data(), shared.dim.Is_available, {i - 1, i - 1}, {0, shared.dim.Is_available.dim[1] - 1}, {0, shared.dim.Is_available.dim[2] - 1}) + dust2::array::sum<real_type>(internal.Rc_available.data(), shared.dim.Rc_available, {i - 1, i - 1}, {0, shared.dim.Rc_available.dim[1] - 1}, {0, shared.dim.Rc_available.dim[2] - 1});
    }
    for (size_t i = 1; i <= shared.dim.lambda_raw.size; ++i) {
      internal.lambda_raw[i - 1] = (internal.Npop_age[i - 1] <= 0 ? 0 : dust2::array::sum<real_type>(internal.lambda_contact.data(), shared.dim.lambda_contact, {i - 1, i - 1}, {0, shared.dim.lambda_contact.dim[1] - 1}) / internal.Npop_age[i - 1]);
    }
    for (size_t i = 1; i <= shared.dim.ngm.size; ++i) {
      internal.ngm[i - 1] = (internal.Npop_age[i - 1] <= 0 ? 0 : dust2::array::sum<real_type>(internal.ngm_unfolded.data(), shared.dim.ngm_unfolded, {i - 1, i - 1}, {0, shared.dim.ngm_unfolded.dim[1] - 1}, {0, shared.dim.ngm_unfolded.dim[2] - 1}, {0, shared.dim.ngm_unfolded.dim[3] - 1}) / internal.Npop_age[i - 1]);
    }
    for (size_t i = 1; i <= shared.dim.lambda.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.lambda.dim[2]; ++k) {
          internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1] + (k - 1) * shared.dim.lambda.mult[2]] = (N <= 0 ? 0 : monty::math::max(static_cast<real_type>(0), internal.lambda_raw[i - 1]) * (1 - shared.age_vaccination_beta_modifier[i - 1 + (j - 1) * shared.dim.age_vaccination_beta_modifier.mult[1] + (k - 1) * shared.dim.age_vaccination_beta_modifier.mult[2]]));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.lambda_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.lambda_S.dim[2]; ++k) {
          internal.lambda_S[i - 1 + (j - 1) * shared.dim.lambda_S.mult[1] + (k - 1) * shared.dim.lambda_S.mult[2]] = (internal.S_available[i - 1 + (j - 1) * shared.dim.S_available.mult[1] + (k - 1) * shared.dim.S_available.mult[2]] <= 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.S_available[i - 1 + (j - 1) * shared.dim.S_available.mult[1] + (k - 1) * shared.dim.S_available.mult[2]], monty::math::max(monty::math::min(internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1] + (k - 1) * shared.dim.lambda.mult[2]], static_cast<real_type>(1)), static_cast<real_type>(0))));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2] + 5] = monty::math::max(S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] + internal.waning_R[i - 1 + (j - 1) * shared.dim.waning_R.mult[1] + (k - 1) * shared.dim.waning_R.mult[2]] + internal.waning_Rc[i - 1 + (j - 1) * shared.dim.waning_Rc.mult[1] + (k - 1) * shared.dim.waning_Rc.mult[2]] + internal.aging_into_S[i - 1 + (j - 1) * shared.dim.aging_into_S.mult[1] + (k - 1) * shared.dim.aging_into_S.mult[2]] - internal.aging_out_of_S[i - 1 + (j - 1) * shared.dim.aging_out_of_S.mult[1] + (k - 1) * shared.dim.aging_out_of_S.mult[2]] - internal.lambda_S[i - 1 + (j - 1) * shared.dim.lambda_S.mult[1] + (k - 1) * shared.dim.lambda_S.mult[2]] - internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] + internal.migration_S[i - 1 + (j - 1) * shared.dim.migration_S.mult[1] + (k - 1) * shared.dim.migration_S.mult[2]] * pos_neg_migration + internal.vaccinating_into_S[i - 1 + (j - 1) * shared.dim.vaccinating_into_S.mult[1] + (k - 1) * shared.dim.vaccinating_into_S.mult[2]] - internal.vaccinating_out_of_S[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_S.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_S.mult[2]] + internal.waning_to_S_long[i - 1 + (j - 1) * shared.dim.waning_to_S_long.mult[1] + (k - 1) * shared.dim.waning_to_S_long.mult[2]] + internal.waning_to_S_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_S_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_S_unvaccinated.mult[2]] - internal.waning_from_S_short[i - 1 + (j - 1) * shared.dim.waning_from_S_short.mult[1] + (k - 1) * shared.dim.waning_from_S_short.mult[2]] - internal.waning_from_S_long[i - 1 + (j - 1) * shared.dim.waning_from_S_long.mult[1] + (k - 1) * shared.dim.waning_from_S_long.mult[2]] - internal.seeded_actual[i - 1 + (j - 1) * shared.dim.seeded_actual.mult[1] + (k - 1) * shared.dim.seeded_actual.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.E.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2] + shared.odin.offset.state[6]] = monty::math::max(E[i - 1 + (j - 1) * shared.dim.E.mult[1] + (k - 1) * shared.dim.E.mult[2]] + internal.lambda_S[i - 1 + (j - 1) * shared.dim.lambda_S.mult[1] + (k - 1) * shared.dim.lambda_S.mult[2]] - internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] + internal.aging_into_E[i - 1 + (j - 1) * shared.dim.aging_into_E.mult[1] + (k - 1) * shared.dim.aging_into_E.mult[2]] - internal.aging_out_of_E[i - 1 + (j - 1) * shared.dim.aging_out_of_E.mult[1] + (k - 1) * shared.dim.aging_out_of_E.mult[2]] - internal.E_death[i - 1 + (j - 1) * shared.dim.E_death.mult[1] + (k - 1) * shared.dim.E_death.mult[2]] + internal.migration_E[i - 1 + (j - 1) * shared.dim.migration_E.mult[1] + (k - 1) * shared.dim.migration_E.mult[2]] * pos_neg_migration + internal.vaccinating_into_E[i - 1 + (j - 1) * shared.dim.vaccinating_into_E.mult[1] + (k - 1) * shared.dim.vaccinating_into_E.mult[2]] - internal.vaccinating_out_of_E[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_E.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_E.mult[2]] + internal.waning_to_E_long[i - 1 + (j - 1) * shared.dim.waning_to_E_long.mult[1] + (k - 1) * shared.dim.waning_to_E_long.mult[2]] + internal.waning_to_E_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_E_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_E_unvaccinated.mult[2]] - internal.waning_from_E_short[i - 1 + (j - 1) * shared.dim.waning_from_E_short.mult[1] + (k - 1) * shared.dim.waning_from_E_short.mult[2]] - internal.waning_from_E_long[i - 1 + (j - 1) * shared.dim.waning_from_E_long.mult[1] + (k - 1) * shared.dim.waning_from_E_long.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.I.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2] + shared.odin.offset.state[7]] = monty::math::max(I[i - 1 + (j - 1) * shared.dim.I.mult[1] + (k - 1) * shared.dim.I.mult[2]] + internal.into_I[i - 1 + (j - 1) * shared.dim.into_I.mult[1] + (k - 1) * shared.dim.into_I.mult[2]] + internal.aging_into_I[i - 1 + (j - 1) * shared.dim.aging_into_I.mult[1] + (k - 1) * shared.dim.aging_into_I.mult[2]] - internal.aging_out_of_I[i - 1 + (j - 1) * shared.dim.aging_out_of_I.mult[1] + (k - 1) * shared.dim.aging_out_of_I.mult[2]] - internal.recovered_I_to_R[i - 1 + (j - 1) * shared.dim.recovered_I_to_R.mult[1] + (k - 1) * shared.dim.recovered_I_to_R.mult[2]] - internal.I_death[i - 1 + (j - 1) * shared.dim.I_death.mult[1] + (k - 1) * shared.dim.I_death.mult[2]] + internal.seeded_actual[i - 1 + (j - 1) * shared.dim.seeded_actual.mult[1] + (k - 1) * shared.dim.seeded_actual.mult[2]] + internal.migration_I[i - 1 + (j - 1) * shared.dim.migration_I.mult[1] + (k - 1) * shared.dim.migration_I.mult[2]] * pos_neg_migration + internal.vaccinating_into_I[i - 1 + (j - 1) * shared.dim.vaccinating_into_I.mult[1] + (k - 1) * shared.dim.vaccinating_into_I.mult[2]] - internal.vaccinating_out_of_I[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_I.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_I.mult[2]] + internal.waning_to_I_long[i - 1 + (j - 1) * shared.dim.waning_to_I_long.mult[1] + (k - 1) * shared.dim.waning_to_I_long.mult[2]] + internal.waning_to_I_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_I_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_I_unvaccinated.mult[2]] - internal.waning_from_I_short[i - 1 + (j - 1) * shared.dim.waning_from_I_short.mult[1] + (k - 1) * shared.dim.waning_from_I_short.mult[2]] - internal.waning_from_I_long[i - 1 + (j - 1) * shared.dim.waning_from_I_long.mult[1] + (k - 1) * shared.dim.waning_from_I_long.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.R.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2] + shared.odin.offset.state[8]] = monty::math::max(R[i - 1 + (j - 1) * shared.dim.R.mult[1] + (k - 1) * shared.dim.R.mult[2]] + internal.recovered_I_to_R[i - 1 + (j - 1) * shared.dim.recovered_I_to_R.mult[1] + (k - 1) * shared.dim.recovered_I_to_R.mult[2]] + internal.recovered_Is_to_R[i - 1 + (j - 1) * shared.dim.recovered_Is_to_R.mult[1] + (k - 1) * shared.dim.recovered_Is_to_R.mult[2]] - internal.waning_R[i - 1 + (j - 1) * shared.dim.waning_R.mult[1] + (k - 1) * shared.dim.waning_R.mult[2]] + internal.aging_into_R[i - 1 + (j - 1) * shared.dim.aging_into_R.mult[1] + (k - 1) * shared.dim.aging_into_R.mult[2]] - internal.aging_out_of_R[i - 1 + (j - 1) * shared.dim.aging_out_of_R.mult[1] + (k - 1) * shared.dim.aging_out_of_R.mult[2]] - internal.R_death[i - 1 + (j - 1) * shared.dim.R_death.mult[1] + (k - 1) * shared.dim.R_death.mult[2]] + internal.migration_R[i - 1 + (j - 1) * shared.dim.migration_R.mult[1] + (k - 1) * shared.dim.migration_R.mult[2]] * pos_neg_migration + internal.vaccinating_into_R[i - 1 + (j - 1) * shared.dim.vaccinating_into_R.mult[1] + (k - 1) * shared.dim.vaccinating_into_R.mult[2]] - internal.vaccinating_out_of_R[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_R.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_R.mult[2]] + internal.waning_to_R_long[i - 1 + (j - 1) * shared.dim.waning_to_R_long.mult[1] + (k - 1) * shared.dim.waning_to_R_long.mult[2]] + internal.waning_to_R_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_R_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_R_unvaccinated.mult[2]] - internal.waning_from_R_short[i - 1 + (j - 1) * shared.dim.waning_from_R_short.mult[1] + (k - 1) * shared.dim.waning_from_R_short.mult[2]] - internal.waning_from_R_long[i - 1 + (j - 1) * shared.dim.waning_from_R_long.mult[1] + (k - 1) * shared.dim.waning_from_R_long.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Is.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Is.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Is.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2] + shared.odin.offset.state[9]] = monty::math::max(Is[i - 1 + (j - 1) * shared.dim.Is.mult[1] + (k - 1) * shared.dim.Is.mult[2]] + internal.into_Is[i - 1 + (j - 1) * shared.dim.into_Is.mult[1] + (k - 1) * shared.dim.into_Is.mult[2]] - internal.recovered_from_Is[i - 1 + (j - 1) * shared.dim.recovered_from_Is.mult[1] + (k - 1) * shared.dim.recovered_from_Is.mult[2]] + internal.aging_into_Is[i - 1 + (j - 1) * shared.dim.aging_into_Is.mult[1] + (k - 1) * shared.dim.aging_into_Is.mult[2]] - internal.aging_out_of_Is[i - 1 + (j - 1) * shared.dim.aging_out_of_Is.mult[1] + (k - 1) * shared.dim.aging_out_of_Is.mult[2]] - internal.Is_death[i - 1 + (j - 1) * shared.dim.Is_death.mult[1] + (k - 1) * shared.dim.Is_death.mult[2]] + internal.migration_Is[i - 1 + (j - 1) * shared.dim.migration_Is.mult[1] + (k - 1) * shared.dim.migration_Is.mult[2]] * pos_neg_migration + internal.vaccinating_into_Is[i - 1 + (j - 1) * shared.dim.vaccinating_into_Is.mult[1] + (k - 1) * shared.dim.vaccinating_into_Is.mult[2]] - internal.vaccinating_out_of_Is[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Is.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Is.mult[2]] + internal.waning_to_Is_long[i - 1 + (j - 1) * shared.dim.waning_to_Is_long.mult[1] + (k - 1) * shared.dim.waning_to_Is_long.mult[2]] + internal.waning_to_Is_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Is_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Is_unvaccinated.mult[2]] - internal.waning_from_Is_short[i - 1 + (j - 1) * shared.dim.waning_from_Is_short.mult[1] + (k - 1) * shared.dim.waning_from_Is_short.mult[2]] - internal.waning_from_Is_long[i - 1 + (j - 1) * shared.dim.waning_from_Is_long.mult[1] + (k - 1) * shared.dim.waning_from_Is_long.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.Rc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Rc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.Rc.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2] + shared.odin.offset.state[10]] = monty::math::max(Rc[i - 1 + (j - 1) * shared.dim.Rc.mult[1] + (k - 1) * shared.dim.Rc.mult[2]] + internal.recovered_Is_to_Rc[i - 1 + (j - 1) * shared.dim.recovered_Is_to_Rc.mult[1] + (k - 1) * shared.dim.recovered_Is_to_Rc.mult[2]] - internal.waning_Rc[i - 1 + (j - 1) * shared.dim.waning_Rc.mult[1] + (k - 1) * shared.dim.waning_Rc.mult[2]] + internal.aging_into_Rc[i - 1 + (j - 1) * shared.dim.aging_into_Rc.mult[1] + (k - 1) * shared.dim.aging_into_Rc.mult[2]] - internal.aging_out_of_Rc[i - 1 + (j - 1) * shared.dim.aging_out_of_Rc.mult[1] + (k - 1) * shared.dim.aging_out_of_Rc.mult[2]] - internal.Rc_death[i - 1 + (j - 1) * shared.dim.Rc_death.mult[1] + (k - 1) * shared.dim.Rc_death.mult[2]] + internal.migration_Rc[i - 1 + (j - 1) * shared.dim.migration_Rc.mult[1] + (k - 1) * shared.dim.migration_Rc.mult[2]] * pos_neg_migration + internal.vaccinating_into_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_into_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_into_Rc.mult[2]] - internal.vaccinating_out_of_Rc[i - 1 + (j - 1) * shared.dim.vaccinating_out_of_Rc.mult[1] + (k - 1) * shared.dim.vaccinating_out_of_Rc.mult[2]] + internal.waning_to_Rc_long[i - 1 + (j - 1) * shared.dim.waning_to_Rc_long.mult[1] + (k - 1) * shared.dim.waning_to_Rc_long.mult[2]] + internal.waning_to_Rc_unvaccinated[i - 1 + (j - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[1] + (k - 1) * shared.dim.waning_to_Rc_unvaccinated.mult[2]] - internal.waning_from_Rc_short[i - 1 + (j - 1) * shared.dim.waning_from_Rc_short.mult[1] + (k - 1) * shared.dim.waning_from_Rc_short.mult[2]] - internal.waning_from_Rc_long[i - 1 + (j - 1) * shared.dim.waning_from_Rc_long.mult[1] + (k - 1) * shared.dim.waning_from_Rc_long.mult[2]], static_cast<real_type>(0));
        }
      }
    }
    state_next[0] = N;
    state_next[1] = dust2::array::sum<real_type>(internal.S_death.data(), shared.dim.S_death) + dust2::array::sum<real_type>(internal.E_death.data(), shared.dim.E_death) + dust2::array::sum<real_type>(internal.I_death.data(), shared.dim.I_death) + dust2::array::sum<real_type>(internal.R_death.data(), shared.dim.R_death) + dust2::array::sum<real_type>(internal.Is_death.data(), shared.dim.Is_death) + dust2::array::sum<real_type>(internal.Rc_death.data(), shared.dim.Rc_death);
    state_next[2] = dust2::array::sum<real_type>(internal.Births.data(), shared.dim.Births);
    for (size_t i = 1; i <= shared.dim.new_case.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.new_case.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.new_case.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.new_case.mult[1] + (k - 1) * shared.dim.new_case.mult[2] + shared.odin.offset.state[11]] = internal.incubated[i - 1 + (j - 1) * shared.dim.incubated.mult[1] + (k - 1) * shared.dim.incubated.mult[2]] + internal.t_seeded[i - 1 + (j - 1) * shared.dim.t_seeded.mult[1] + (k - 1) * shared.dim.t_seeded.mult[2]];
        }
      }
    }
    state_next[3] = (shared.n_age <= 0 ? 0 : dust2::array::sum<real_type>(internal.ngm.data(), shared.dim.ngm) / shared.n_age);
    for (size_t i = 1; i <= shared.dim.Reff_age.size; ++i) {
      state_next[i - 1 + shared.odin.offset.state[12]] = internal.ngm[i - 1];
    }
    state_next[4] = dust2::array::sum<real_type>(internal.Npop_background_death.data(), shared.dim.Npop_background_death) / N;
  }
};

#include <cpp11.hpp>
#include <dust2/r/discrete/system.hpp>

[[cpp11::register]]
SEXP dust2_system_transmission_model_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_alloc<transmission_model>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}
[[cpp11::register]]
SEXP dust2_system_transmission_model_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_discrete<transmission_model>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_discrete<transmission_model>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_discrete<transmission_model>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_discrete<transmission_model>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_discrete<transmission_model>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_discrete<transmission_model>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_discrete<transmission_model>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_discrete<transmission_model>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_discrete<transmission_model>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_discrete<transmission_model>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_transmission_model_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_discrete<transmission_model>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
